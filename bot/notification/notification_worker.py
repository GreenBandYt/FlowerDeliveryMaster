# time_settings.json

import asyncio
import logging
from telegram import Bot
from django.utils.timezone import now
from asgiref.sync import sync_to_async

from bot.utils.time_config import load_settings  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ load_settings
from bot.utils.time_config import NEW_ORDER_NOTIFY_INTERVAL, REPEAT_ORDER_NOTIFY_INTERVAL
from bot.utils.time_utils import is_working_hours
from catalog.models import Order
from users.models import CustomUser

import os
from dotenv import load_dotenv  # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É .env

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logger = logging.getLogger(__name__)

bot = Bot(token=TELEGRAM_BOT_TOKEN)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
LAST_NOTIFIED_AT = None


async def notification_worker():
    """
    –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–∞–∫–∞–∑–∞—Ö.
    """
    global LAST_NOTIFIED_AT  # –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é

    if LAST_NOTIFIED_AT is None:
        LAST_NOTIFIED_AT = now()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ

    while True:
        try:
            # –ó–∞–≥—Ä—É–∑–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
            settings = load_settings()  # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏

            # –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            NEW_ORDER_NOTIFY_INTERVAL = settings['new_order_notify_interval']
            REPEAT_ORDER_NOTIFY_INTERVAL = settings['repeat_order_notify_interval']

            if not is_working_hours():
                logger.info("‚è≥ –í–Ω–µ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è.")
            else:
                await process_new_orders()
                await process_repeat_notifications()

            logger.info(f"‚è≥ –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ {NEW_ORDER_NOTIFY_INTERVAL} –º–∏–Ω—É—Ç")
            await asyncio.sleep(NEW_ORDER_NOTIFY_INTERVAL * 60)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}", exc_info=True)



async def process_new_orders():
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–∞—Ö.
    """
    orders = await sync_to_async(lambda: list(Order.objects.filter(status="created")))()
    if not orders:
        logger.info("‚úÖ –ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")
        return

    admins_and_staff = await get_admins_and_staff()

    for order in orders:
        if should_notify_order(order):
            message = await format_order_message(order)
            await send_notifications(admins_and_staff, message, order.id)

            logger.info(f"üì® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order.id}")




async def process_repeat_notifications():
    """
    –ü–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –µ—Å–ª–∏ –∑–∞–∫–∞–∑ –¥–æ–ª–≥–æ –Ω–µ –±–µ—Ä—É—Ç.
    """
    global LAST_NOTIFIED_AT  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º
    if LAST_NOTIFIED_AT is None or (now() - LAST_NOTIFIED_AT).total_seconds() > REPEAT_ORDER_NOTIFY_INTERVAL * 60:
        orders = await sync_to_async(lambda: list(Order.objects.filter(status="created")))()

        if not orders:
            logger.info("‚úÖ –ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")
            return

        admins_and_staff = await get_admins_and_staff()

        for order in orders:
            message = format_order_message(order, repeat=True)
            await send_notifications(admins_and_staff, message)

        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        LAST_NOTIFIED_AT = now()
        logger.info(f"üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –∑–∞–∫–∞–∑–æ–≤")
    else:
        logger.info("‚è≥ –ü–æ–≤—Ç–æ—Ä–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")


async def get_admins_and_staff():
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å Telegram ID.
    """
    users = await sync_to_async(
        lambda: list(CustomUser.objects.filter(is_active=True, telegram_id__isnull=False))
    )()
    return [user.telegram_id for user in users if user.is_superuser or user.is_staff]


from telegram import InlineKeyboardMarkup, InlineKeyboardButton

async def send_notifications(user_ids, message, order_id):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏–∑ —Å–ø–∏—Å–∫–∞.
    """
    for user_id in user_ids:
        try:
            user = await sync_to_async(lambda: CustomUser.objects.get(telegram_id=user_id))()

            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏ –Ω–µ —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
            if user.is_staff:
                keyboard = InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚úÖ –í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É", callback_data=f"staff_take_order:{order_id}")]
                ])
                await bot.send_message(chat_id=user_id, text=message, parse_mode="Markdown", reply_markup=keyboard)
            else:
                # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ –∫–Ω–æ–ø–∫–∏
                await bot.send_message(chat_id=user_id, text=message, parse_mode="Markdown")

            await asyncio.sleep(1)  # –ß—Ç–æ–±—ã –Ω–µ –ø–æ–ø–∞—Å—Ç—å –ø–æ–¥ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")


def should_notify_order(order):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∑–∞–∫–∞–∑–∞.
    """
    return True  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤


async def format_order_message(order, repeat=False):
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –∑–∞–∫–∞–∑–µ.
    """
    # –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∑–∞–∫–∞–∑–∞ —á–µ—Ä–µ–∑ sync_to_async
    order_items = await sync_to_async(
        lambda: "\n".join([f"üì¶ {item.product.name} - {item.quantity} —à—Ç." for item in order.items.all()])
    )()

    message_type = "üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ!" if repeat else "üÜï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!"

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —á–µ—Ä–µ–∑ sync_to_async
    user = await sync_to_async(lambda: order.user)()

    return f"""
{message_type}

üìù *–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞:*
üë§ *–ü–æ–∫—É–ø–∞—Ç–µ–ª—å:* {user.username}
üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* {user.telegram_id}  
üìç *–ê–¥—Ä–µ—Å:* {order.address}

{order_items}
üí∞ *–ò—Ç–æ–≥–æ:* {order.total_price} ‚ÇΩ
"""




if __name__ == "__main__":
    logging.info("üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
    loop = asyncio.get_event_loop()
    loop.create_task(notification_worker())
    loop.run_forever()
