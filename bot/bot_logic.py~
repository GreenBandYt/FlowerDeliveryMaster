from asgiref.sync import async_to_sync, sync_to_async
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    CommandHandler,
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    filters,
    Application,
)
import os
import re
import asyncio
from dotenv import load_dotenv
from users.models import CustomUser
from django.db.utils import IntegrityError
from prettytable import PrettyTable
from catalog.models import Order
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
USERNAME, PASSWORD, PHONE, ADDRESS = range(4)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    telegram_id = update.effective_user.id

    try:
        user = await sync_to_async(CustomUser.objects.get)(telegram_id=telegram_id)
        if user.is_superuser:
            await update.message.reply_text(
                f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.username} (–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä)!\n"
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "/analytics - –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∞–ª–∏—Ç–∏–∫–∏\n"
                "/manage_users - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏\n"
                "/orders - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏"
            )
        elif user.is_staff:
            await update.message.reply_text(
                f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.username} (–°–æ—Ç—Ä—É–¥–Ω–∏–∫)!\n"
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "/orders - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏\n"
                "/update_status - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–æ–≤"
            )
        else:
            await update.message.reply_text(
                f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.username} (–ö–ª–∏–µ–Ω—Ç)!\n"
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "/view_orders - –ü—Ä–æ—Å–º–æ—Ç—Ä –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤\n"
                "/new_order - –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞"
            )
    except CustomUser.DoesNotExist:
        await update.message.reply_text(
            "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω.\n"
            "–í–≤–µ–¥–∏—Ç–µ /link <username>, —á—Ç–æ–±—ã –ø—Ä–∏–≤—è–∑–∞—Ç—å –≤–∞—à Telegram –∞–∫–∫–∞—É–Ω—Ç –∫ —Å–∏—Å—Ç–µ–º–µ."
        )

# –ö–æ–º–∞–Ω–¥–∞ /link –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ Telegram –∞–∫–∫–∞—É–Ω—Ç–∞ –∫ –ª–æ–≥–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def link(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) != 1:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω. –ü—Ä–∏–º–µ—Ä: /link username")
        return
    username = context.args[0]
    telegram_id = update.effective_user.id
    try:
        user = await sync_to_async(CustomUser.objects.get)(username=username)
        if user.telegram_id and user.telegram_id != telegram_id:
            await update.message.reply_text("–≠—Ç–æ—Ç –ª–æ–≥–∏–Ω —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É Telegram –∞–∫–∫–∞—É–Ω—Ç—É.")
            return
        user.telegram_id = telegram_id
        await sync_to_async(user.save)()
        await update.message.reply_text(f"–í–∞—à Telegram –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –ª–æ–≥–∏–Ω—É {username}.")
    except CustomUser.DoesNotExist:
        await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")

# –ö–æ–º–∞–Ω–¥–∞ /register –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def register(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
        reply_markup=ReplyKeyboardMarkup([["–û—Ç–º–µ–Ω–∞"]], one_time_keyboard=True),
    )
    return USERNAME

async def get_username(update: Update, context: ContextTypes.DEFAULT_TYPE):
    username = update.message.text
    if username.lower() == "–æ—Ç–º–µ–Ω–∞":
        await update.message.reply_text("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return ConversationHandler.END
    context.user_data['username'] = username
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
    return PASSWORD

async def get_password(update: Update, context: ContextTypes.DEFAULT_TYPE):
    password = update.message.text
    context.user_data['password'] = password
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    return PHONE

async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    phone = update.message.text
    context.user_data['phone'] = phone
    phone_pattern = r'^\+7\(\d{3}\)\d{3}-\d{2}-\d{2}$'
    if not re.match(phone_pattern, phone):
        await update.message.reply_text(
            "–û—à–∏–±–∫–∞: –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7(XXX)XXX-XX-XX."
        )
        return PHONE
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å:")
    return ADDRESS

async def get_address(update: Update, context: ContextTypes.DEFAULT_TYPE):
    address = update.message.text
    user_data = context.user_data
    try:
        user = await sync_to_async(CustomUser.objects.create_user)(
            username=user_data['username'],
            password=user_data['password'],
            telegram_id=update.effective_user.id,
            phone_number=user_data['phone'],
            address=address,
        )
        await sync_to_async(user.save)()
        await update.message.reply_text("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.")
    except IntegrityError:
        await update.message.reply_text(
            "–û—à–∏–±–∫–∞: —Ç–∞–∫–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
    except Exception as e:
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END

def get_registration_handler():
    return ConversationHandler(
        entry_points=[CommandHandler("register", register)],
        states={
            USERNAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_username)],
            PASSWORD: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_password)],
            PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_phone)],
            ADDRESS: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_address)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

# –ö–æ–¥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω...
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /orders
AWAIT_ORDER_ID = 1

async def orders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    telegram_id = update.effective_user.id
    try:
        user = await sync_to_async(CustomUser.objects.get)(telegram_id=telegram_id)
        if not (user.is_superuser or user.is_staff):
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
            return ConversationHandler.END

        all_orders = await sync_to_async(lambda: list(Order.objects.select_related('user').all()))()
        if not all_orders:
            await update.message.reply_text("–ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
            return ConversationHandler.END

        table = PrettyTable(["ID", "–î–∞—Ç–∞", "–°—Ç–∞—Ç—É—Å", "–°—É–º–º–∞", "–ö–ª–∏–µ–Ω—Ç"])
        for order in all_orders:
            table.add_row([
                order.id,
                order.created_at.strftime("%Y-%m-%d %H:%M"),
                order.get_status_display(),
                f"{order.total_price:.2f} —Ä—É–±." if order.total_price else "0.00 —Ä—É–±.",
                order.user.username if order.user else "–ù–µ —É–∫–∞–∑–∞–Ω"
            ])
        table_str = table.get_string()
        await update.message.reply_text(f"–í—Å–µ –∑–∞–∫–∞–∑—ã:\n```\n{table_str}\n```", parse_mode="Markdown")
        await update.message.reply_text("–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:")
        return AWAIT_ORDER_ID

    except CustomUser.DoesNotExist:
        await update.message.reply_text("–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.")
        return ConversationHandler.END
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /orders: {e}", exc_info=True)
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤.")
        return ConversationHandler.END

async def order_details(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ ID –∑–∞–∫–∞–∑–∞.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–∞, –≤–∫–ª—é—á–∞—è "–û—Ç–º–µ–Ω–∞".
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–∫–∞–∑–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        order_id = int(update.message.text)
        order = await sync_to_async(Order.objects.select_related('user').get)(id=order_id)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–∫–∞–∑–∞
        order_info = (
            f"üì¶ **–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ #{order.id}**\n"
            f"üìÖ –î–∞—Ç–∞: {order.created_at.strftime('%Y-%m-%d %H:%M')}\n"
            f"üìå –°—Ç–∞—Ç—É—Å: {order.get_status_display()}\n"
            f"üí∞ –°—É–º–º–∞: {order.total_price:.2f} —Ä—É–±.\n"
            f"üë§ –ö–ª–∏–µ–Ω—Ç: {order.user.username if order.user else '–ù–µ —É–∫–∞–∑–∞–Ω'}"
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–∞ –∏ "–û—Ç–º–µ–Ω–∞"
        keyboard = [
            [InlineKeyboardButton("–ù–æ–≤—ã–π", callback_data=f"status_{order.id}_new")],
            [InlineKeyboardButton("–í –ø—Ä–æ—Ü–µ—Å—Å–µ", callback_data=f"status_{order.id}_processing")],
            [InlineKeyboardButton("–ó–∞–≤–µ—Ä—à—ë–Ω", callback_data=f"status_{order.id}_completed")],
            [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data=f"cancel_order_status_{order.id}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        await update.message.reply_text(order_info, parse_mode="Markdown", reply_markup=reply_markup)
        return ConversationHandler.END

    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞.")
        return AWAIT_ORDER_ID
    except Order.DoesNotExist:
        await update.message.reply_text("–ó–∞–∫–∞–∑ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return AWAIT_ORDER_ID
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞: {e}", exc_info=True)
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞.")
        return ConversationHandler.END


async def update_order_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∫–Ω–æ–ø–æ–∫ –¥–ª—è —Å–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞.
    """
    query = update.callback_query
    await query.answer()

    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback (—Ñ–æ—Ä–º–∞—Ç: "status_<order_id>_<new_status>" –∏–ª–∏ "cancel_order_status_<order_id>")
        callback_data = query.data
        if callback_data.startswith("cancel_order_status_"):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è "–û—Ç–º–µ–Ω–∞"
            await query.delete_message()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
            return

        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞–∫–∞–∑–∞ –∏ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
        _, order_id, new_status = callback_data.split("_")
        order = await sync_to_async(Order.objects.get)(id=order_id)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
        order.status = new_status
        await sync_to_async(order.save)()

        await query.edit_message_text(f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ #{order.id} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ '{new_status}'.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞: {e}", exc_info=True)
        await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞.")



# –ö–æ–º–∞–Ω–¥–∞ /manage_users –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
AWAIT_USER_ID = 2

async def manage_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    telegram_id = update.effective_user.id
    try:
        admin = await sync_to_async(CustomUser.objects.get)(telegram_id=telegram_id)
        if not admin.is_superuser:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
            return ConversationHandler.END

        users = await sync_to_async(lambda: list(CustomUser.objects.filter(is_superuser=False)))()
        if not users:
            await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return ConversationHandler.END

        table = PrettyTable(["ID", "–ò–º—è", "Email", "–°—Ç–∞—Ç—É—Å"])
        for user in users:
            status = "–°–æ—Ç—Ä—É–¥–Ω–∏–∫" if user.is_staff else "–ö–ª–∏–µ–Ω—Ç"
            table.add_row([user.id, user.username, user.email, status])

        table_str = table.get_string()
        await update.message.reply_text(f"–°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏ –∫–ª–∏–µ–Ω—Ç–æ–≤:\n```\n{table_str}\n```", parse_mode="Markdown")
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞:")
        return AWAIT_USER_ID

    except CustomUser.DoesNotExist:
        await update.message.reply_text("–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")
        return ConversationHandler.END
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /manage_users: {e}", exc_info=True)
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
        return ConversationHandler.END

async def update_user_is_staff(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = int(update.message.text)
        user = await sync_to_async(CustomUser.objects.get)(id=user_id, is_superuser=False)

        status = "–°–æ—Ç—Ä—É–¥–Ω–∏–∫" if user.is_staff else "–ö–ª–∏–µ–Ω—Ç"
        user_info = (
            f"üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å #{user.id}**\n"
            f"–ò–º—è: {user.username}\n"
            f"Email: {user.email}\n"
            f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {status}"
        )

        keyboard = [
            [InlineKeyboardButton("–°–¥–µ–ª–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º", callback_data=f"staff_{user.id}_true")],
            [InlineKeyboardButton("–°–¥–µ–ª–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–º", callback_data=f"staff_{user.id}_false")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(user_info, parse_mode="Markdown", reply_markup=reply_markup)
        return ConversationHandler.END

    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return AWAIT_USER_ID
    except CustomUser.DoesNotExist:
        await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        return AWAIT_USER_ID
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ update_user_is_staff: {e}", exc_info=True)
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
        return ConversationHandler.END

async def update_user_status_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    try:
        _, user_id, is_staff = query.data.split("_")
        user = await sync_to_async(CustomUser.objects.get)(id=user_id)

        user.is_staff = is_staff == "true"
        await sync_to_async(user.save)()

        new_status = "–°–æ—Ç—Ä—É–¥–Ω–∏–∫" if user.is_staff else "–ö–ª–∏–µ–Ω—Ç"
        await query.edit_message_text(f"‚úÖ –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è #{user.id} –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ '{new_status}'.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}", exc_info=True)
        await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞.")


async def async_send_new_order_notification(order):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º.
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å telegram_id
        staff_users = await sync_to_async(
            lambda: list(CustomUser.objects.filter(is_staff=True, telegram_id__isnull=False))
        )()

        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∑–∞–∫–∞–∑–∞
        order_items = await sync_to_async(lambda: list(order.items.select_related("product").all()))()

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        order_message = (
            f"üì¶ **–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order.id}**\n"
            f"üå∏ –°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:\n"
            + "\n".join(
                [f"- {item.product.name}: {item.quantity} —à—Ç. –ø–æ {item.price:.2f} —Ä—É–±." for item in order_items]
            )
            + f"\nüí∞ –û–±—â–∞—è —Å—É–º–º–∞: {order.total_price:.2f} —Ä—É–±.\n"
            f"üìç –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {order.address or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞: {order.notes or '–ù–µ —É–∫–∞–∑–∞–Ω'}"
        )

        # –ö–Ω–æ–ø–∫–∞ "–í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É"
        keyboard = [[InlineKeyboardButton("–í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É", callback_data=f"take_order_{order.id}")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
        token = os.getenv('TELEGRAM_BOT_TOKEN')
        if not token:
            raise ValueError("–¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env.")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º
        app = Application.builder().token(token).build()
        for staff in staff_users:
            await app.bot.send_message(
                chat_id=staff.telegram_id,
                text=order_message,
                parse_mode="Markdown",
                reply_markup=reply_markup
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}", exc_info=True)
def send_new_order_notification(order):
    """
    –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—ë—Ä—Ç–∫–∞ –¥–ª—è –≤—ã–∑–æ–≤–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
    """
    asyncio.run(async_send_new_order_notification(order))

async def take_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É".
    """
    query = update.callback_query
    await query.answer()

    try:
        callback_data = query.data
        order_id = int(callback_data.split("_")[2])

        order = await sync_to_async(Order.objects.select_related("user").get)(id=order_id)

        if order.status != "created":
            await query.edit_message_text(f"‚ö†Ô∏è –ó–∞–∫–∞–∑ #{order.id} —É–∂–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
            return

        order.status = "processing"
        user = await sync_to_async(CustomUser.objects.get)(telegram_id=query.from_user.id)
        await sync_to_async(order.save)()

        await query.edit_message_text(f"‚úÖ –í—ã –≤–∑—è–ª–∏ –∑–∞–∫–∞–∑ #{order.id} –≤ —Ä–∞–±–æ—Ç—É.")

        staff_users = await sync_to_async(
            lambda: list(CustomUser.objects.filter(is_staff=True, telegram_id__isnull=False).exclude(id=user.id))
        )()
        for staff in staff_users:
            await context.bot.send_message(
                chat_id=staff.telegram_id,
                text=f"‚ö†Ô∏è –ó–∞–∫–∞–∑ #{order.id} –≤–∑—è—Ç –≤ —Ä–∞–±–æ—Ç—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º {user.username}."
            )

    except Order.DoesNotExist:
        await query.edit_message_text("‚ùå –≠—Ç–æ—Ç –∑–∞–∫–∞–∑ –±–æ–ª—å—à–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ take_order: {e}", exc_info=True)
        await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞.")
