# bot/handlers/admin.py

import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CallbackQueryHandler, CommandHandler, ConversationHandler, CallbackContext
from asgiref.sync import sync_to_async
from users.models import CustomUser
from catalog.models import Order
from prettytable import PrettyTable
from datetime import datetime, timedelta  # –î–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è ConversationHandler
AWAIT_USER_ID = 2
# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
CHOOSE_PERIOD, EXIT_ANALYTICS = range(2)

# ======= –ü–æ–º–æ—â—å –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ =======
async def admin_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ö–æ–º–∞–Ω–¥–∞ /admin_help –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∫–æ–º–∞–Ω–¥.
    """
    await update.message.reply_text(
        "üëë **–ü–æ–º–æ—â—å –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:**\n\n"
        "üìä /analytics - –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∞–ª–∏—Ç–∏–∫–∏\n"
        "üë• /manage_users - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏\n"
        "üì¶ /orders - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏\n"
        "‚ÑπÔ∏è /admin_help - –ü–æ–º–æ—â—å (—ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫)",
        parse_mode="Markdown"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /orders
AWAIT_ORDER_ID = 1

# ======= –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏: –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤ =======
async def orders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    telegram_id = update.effective_user.id
    try:
        user = await sync_to_async(CustomUser.objects.get)(telegram_id=telegram_id)
        if not (user.is_superuser or user.is_staff):
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
            return ConversationHandler.END

        all_orders = await sync_to_async(lambda: list(Order.objects.select_related('user').all()))()
        if not all_orders:
            await update.message.reply_text("–ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
            return ConversationHandler.END

        table = PrettyTable(["ID", "–î–∞—Ç–∞", "–°—Ç–∞—Ç—É—Å", "–°—É–º–º–∞", "–ö–ª–∏–µ–Ω—Ç"])
        for order in all_orders:
            table.add_row([
                order.id,
                order.created_at.strftime("%Y-%m-%d %H:%M"),
                order.get_status_display(),
                f"{order.total_price:.2f} —Ä—É–±." if order.total_price else "0.00 —Ä—É–±.",
                order.user.username if order.user else "–ù–µ —É–∫–∞–∑–∞–Ω"
            ])

        # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –Ω–∞ —á–∞—Å—Ç–∏
        table_str = table.get_string()
        MAX_MESSAGE_LENGTH = 4000  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–ø–∞—Å–æ–º

        # –†–∞–∑–¥–µ–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —Å—Ç—Ä–æ–∫–∞–º
        lines = table_str.split("\n")
        chunk = ""
        for line in lines:
            if len(chunk) + len(line) + 1 > MAX_MESSAGE_LENGTH:
                await update.message.reply_text(f"<pre>{chunk}</pre>", parse_mode="HTML")
                chunk = line + "\n"
            else:
                chunk += line + "\n"

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —á–∞–Ω–∫–∞
        if chunk:
            await update.message.reply_text(f"<pre>{chunk}</pre>", parse_mode="HTML")

    except CustomUser.DoesNotExist:
        await update.message.reply_text("–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /orders: {e}", exc_info=True)
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

# ======= –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏: –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞ =======

async def order_details(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ ID –∑–∞–∫–∞–∑–∞.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–∞, –≤–∫–ª—é—á–∞—è "–û—Ç–º–µ–Ω–∞".
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–∫–∞–∑–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        order_id = int(update.message.text)
        order = await sync_to_async(Order.objects.select_related('user').get)(id=order_id)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–∫–∞–∑–∞
        order_info = (
            f"üì¶ **–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ #{order.id}**\n"
            f"üìÖ –î–∞—Ç–∞: {order.created_at.strftime('%Y-%m-%d %H:%M')}\n"
            f"üìå –°—Ç–∞—Ç—É—Å: {order.get_status_display()}\n"
            f"üí∞ –°—É–º–º–∞: {order.total_price:.2f} —Ä—É–±.\n"
            f"üë§ –ö–ª–∏–µ–Ω—Ç: {order.user.username if order.user else '–ù–µ —É–∫–∞–∑–∞–Ω'}"
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–∞ –∏ "–û—Ç–º–µ–Ω–∞"
        keyboard = [
            [InlineKeyboardButton("–ù–æ–≤—ã–π", callback_data=f"status_{order.id}_new")],
            [InlineKeyboardButton("–í –ø—Ä–æ—Ü–µ—Å—Å–µ", callback_data=f"status_{order.id}_processing")],
            [InlineKeyboardButton("–ó–∞–≤–µ—Ä—à—ë–Ω", callback_data=f"status_{order.id}_completed")],
            [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data=f"cancel_order_status_{order.id}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        await update.message.reply_text(order_info, parse_mode="Markdown", reply_markup=reply_markup)
        return ConversationHandler.END

    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞.")
        return AWAIT_ORDER_ID
    except Order.DoesNotExist:
        await update.message.reply_text("–ó–∞–∫–∞–∑ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return AWAIT_ORDER_ID
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞: {e}", exc_info=True)
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞.")
        return ConversationHandler.END


async def update_order_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∫–Ω–æ–ø–æ–∫ –¥–ª—è —Å–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞.
    """
    query = update.callback_query
    await query.answer()

    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback (—Ñ–æ—Ä–º–∞—Ç: "status_<order_id>_<new_status>" –∏–ª–∏ "cancel_order_status_<order_id>")
        callback_data = query.data
        if callback_data.startswith("cancel_order_status_"):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è "–û—Ç–º–µ–Ω–∞"
            await query.delete_message()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
            return

        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞–∫–∞–∑–∞ –∏ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
        _, order_id, new_status = callback_data.split("_")
        order = await sync_to_async(Order.objects.get)(id=order_id)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
        order.status = new_status
        await sync_to_async(order.save)()

        await query.edit_message_text(f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ #{order.id} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ '{new_status}'.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞: {e}", exc_info=True)
        await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞.")




# ======= –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ =======
async def manage_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ö–æ–º–∞–Ω–¥–∞ /manage_users –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Ö ID, –∏–º–µ–Ω–µ–º, email –∏ —Å—Ç–∞—Ç—É—Å–æ–º (–ö–ª–∏–µ–Ω—Ç –∏–ª–∏ –°–æ—Ç—Ä—É–¥–Ω–∏–∫).
    """
    telegram_id = update.effective_user.id
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        admin = await sync_to_async(CustomUser.objects.get)(telegram_id=telegram_id)
        if not admin.is_superuser:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏
        users = await sync_to_async(lambda: list(CustomUser.objects.filter(is_superuser=False)))()
        if not users:
            await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
        table = PrettyTable(["ID", "–ò–º—è", "Email", "–°—Ç–∞—Ç—É—Å"])
        for user in users:
            status = "–°–æ—Ç—Ä—É–¥–Ω–∏–∫" if user.is_staff else "–ö–ª–∏–µ–Ω—Ç"
            table.add_row([user.id, user.username, user.email, status])

        table_str = table.get_string()
        await update.message.reply_text(
            f"–°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏ –∫–ª–∏–µ–Ω—Ç–æ–≤:\n```\n{table_str}\n```",
            parse_mode="Markdown"
        )
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞:")
    except CustomUser.DoesNotExist:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        await update.message.reply_text("–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")
    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /manage_users: {e}", exc_info=True)
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

# ======= –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è =======
async def update_user_is_staff(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫ —Å–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–∞ (–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –∏–ª–∏ –ö–ª–∏–µ–Ω—Ç).
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        user_id = int(update.message.text)
        user = await sync_to_async(CustomUser.objects.get)(id=user_id, is_superuser=False)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        status = "–°–æ—Ç—Ä—É–¥–Ω–∏–∫" if user.is_staff else "–ö–ª–∏–µ–Ω—Ç"
        user_info = (
            f"üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å #{user.id}**\n"
            f"–ò–º—è: {user.username}\n"
            f"Email: {user.email}\n"
            f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {status}"
        )

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∏ –æ—Ç–º–µ–Ω—ã
        keyboard = [
            [InlineKeyboardButton("–°–¥–µ–ª–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º", callback_data=f"staff_{user.id}_true")],
            [InlineKeyboardButton("–°–¥–µ–ª–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–º", callback_data=f"staff_{user.id}_false")],
            [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data=f"cancel_user_status_{user.id}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        await update.message.reply_text(user_info, parse_mode="Markdown", reply_markup=reply_markup)
        return ConversationHandler.END

    except ValueError:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞ ID
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return AWAIT_USER_ID
    except CustomUser.DoesNotExist:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        return AWAIT_USER_ID
    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        logger.error(f"–û—à–∏–±–∫–∞ –≤ update_user_is_staff: {e}", exc_info=True)
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
        return ConversationHandler.END


# ======= Callback-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è =======
async def update_user_status_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Callback-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–∞ is_staff –∏–ª–∏ –æ—Ç–º–µ–Ω—ã.
    """
    query = update.callback_query
    await query.answer()

    try:
        callback_data = query.data
        if callback_data.startswith("cancel_user_status_"):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è "–û—Ç–º–µ–Ω–∞"
            await query.delete_message()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
            return

        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
        _, user_id, is_staff = callback_data.split("_")
        user = await sync_to_async(CustomUser.objects.get)(id=user_id)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å is_staff
        user.is_staff = is_staff == "true"
        await sync_to_async(user.save)()

        new_status = "–°–æ—Ç—Ä—É–¥–Ω–∏–∫" if user.is_staff else "–ö–ª–∏–µ–Ω—Ç"
        await query.edit_message_text(f"‚úÖ –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è #{user.id} –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ '{new_status}'.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}", exc_info=True)
        await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞.")


# ======= –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ (ConversationHandler) =======
def get_analytics_handler():
    return ConversationHandler(
        entry_points=[CommandHandler("analytics", analytics)],
        states={
            CHOOSE_PERIOD: [CallbackQueryHandler(analytics_period_handler)],
        },
        fallbacks=[CallbackQueryHandler(analytics_period_handler)],
    )

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
def get_analytics_buttons():
    keyboard = [
        [InlineKeyboardButton("–°–µ–≥–æ–¥–Ω—è", callback_data="analytics_today")],
        [InlineKeyboardButton("–ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π", callback_data="analytics_week")],
        [InlineKeyboardButton("–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü", callback_data="analytics_month")],
        [InlineKeyboardButton("–¢–µ–∫—É—â–∏–π –≥–æ–¥", callback_data="analytics_year")],
        [InlineKeyboardButton("–í—Å—ë –≤—Ä–µ–º—è", callback_data="analytics_all")],
        [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="analytics_cancel")],
    ]
    return InlineKeyboardMarkup(keyboard)


# ======= –ö–æ–º–∞–Ω–¥–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ /analytics =======

async def analytics(update: Update, context: CallbackContext) -> int:
    """
    –ù–∞—á–∞–ª–æ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞.
    """
    await update.message.reply_text(
        text=f"üìä **–ê–Ω–∞–ª–∏—Ç–∏–∫–∞:**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:",
        reply_markup=get_analytics_buttons(),
        parse_mode="Markdown"
    )
    return CHOOSE_PERIOD

# ======= –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ =======

async def analytics_period_handler(update: Update, context: CallbackContext) -> int:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏.
    """
    query = update.callback_query
    await query.answer()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥ –Ω–∞ –æ—Å–Ω–æ–≤–µ callback_data
    period = query.data
    if period == "analytics_cancel":
        await query.edit_message_text("üîô –í—ã –≤—ã—à–ª–∏ –∏–∑ –º–µ–Ω—é –∞–Ω–∞–ª–∏—Ç–∏–∫–∏.")
        return ConversationHandler.END

    title = ""
    filter_kwargs = {}

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞ –Ω–∞ –ø–µ—Ä–∏–æ–¥
    if period == "analytics_today":
        filter_kwargs = {"created_at__date": datetime.now().date()}
        title = "–°–µ–≥–æ–¥–Ω—è"
    elif period == "analytics_week":
        filter_kwargs = {"created_at__gte": datetime.now().date() - timedelta(days=7)}
        title = "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π"
    elif period == "analytics_month":
        filter_kwargs = {
            "created_at__month": datetime.now().month,
            "created_at__year": datetime.now().year,
        }
        title = "–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü"
    elif period == "analytics_year":
        filter_kwargs = {"created_at__year": datetime.now().year}
        title = "–¢–µ–∫—É—â–∏–π –≥–æ–¥"
    elif period == "analytics_all":
        filter_kwargs = {}
        title = "–í—Å—ë –≤—Ä–µ–º—è"

    # –ü–æ–¥—Å—á–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–π
    total_orders = await sync_to_async(lambda: Order.objects.filter(**filter_kwargs).count())()
    total_revenue = await sync_to_async(lambda: sum(order.total_price for order in Order.objects.filter(**filter_kwargs)))()
    average_order_value = total_revenue / total_orders if total_orders > 0 else 0
    total_users = await sync_to_async(lambda: CustomUser.objects.count())()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    analytics_text = (
        f"üìä **–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∑–∞ {title}:**\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: **{total_users}**\n"
        f"üì¶ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: **{total_orders}**\n"
        f"üí∞ –û–±—â–∏–π –¥–æ—Ö–æ–¥: **{total_revenue or 0:.2f} ‚ÇΩ**\n"
        f"üßæ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: **{average_order_value or 0:.2f} ‚ÇΩ**"
    )
    await query.edit_message_text(analytics_text, parse_mode="Markdown")
    return ConversationHandler.END