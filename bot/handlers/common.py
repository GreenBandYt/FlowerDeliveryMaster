# bot/handlers/common.py

import logging
from telegram import Update
from telegram.ext import ContextTypes
from users.models import CustomUser
from asgiref.sync import sync_to_async
from bot.dictionaries.text_actions import TEXT_ACTIONS
from bot.dictionaries.smart_replies import TEXT_RESPONSES
from bot.dictionaries.smart_replies import get_smart_reply
from bot.dictionaries.callback_actions import CALLBACK_ACTIONS
from bot.utils.callback_parser import parse_callback_data  # –ù–æ–≤—ã–π –ø–∞—Ä—Å–µ—Ä
from django.core.cache import cache
from bot.handlers.admin import admin_start
from bot.handlers.admin import (
    update_user_status_callback,
    analytics_today,
    analytics_week,
    analytics_month,
    analytics_year,
    analytics_all_time,
    analytics_cancel,
    cancel_user_status_callback,
    handle_orders_by_status_new,
    handle_orders_processing,
    handle_orders_completed,
    handle_order_details,
    handle_set_executor,
    handle_admin_orders,
)
from bot.handlers.admin import (handle_user_status_update_request, cancel_user_status_callback,)

from bot.handlers.staff import (staff_start,
    handle_staff_new_orders,
    handle_staff_take_order,
    handle_staff_my_orders,
    complete_order_callback,
    cancel_order_callback,
    handle_staff_help,
    )

from bot.handlers.customer import (
    customer_start,
    handle_customer_help,
    handle_customer_catalog,
    customer_add_to_cart,
    customer_view_cart,
    customer_decrease_quantity,
    customer_increase_quantity,
    customer_remove_from_cart,
    customer_view_checkout,
    customer_confirm_checkout,
    customer_cancel_order,
    customer_view_orders,
    customer_repeat_order,
    )

from bot.handlers.new_user import (
    new_user_start,
    handle_new_user_help,
    handle_new_user_link_start,
    handle_new_user_link_input,
    handle_new_user_get_username,
    handle_new_user_get_password,
    handle_new_user_get_phone,
    handle_new_user_get_address,

    )

from bot.utils.access_control import check_access

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO)

STATE_HANDLERS = {
    "USERNAME": handle_new_user_get_username,
    "PASSWORD": handle_new_user_get_password,
    "PHONE": handle_new_user_get_phone,
    "ADDRESS": handle_new_user_get_address,
}

# ======== –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start ========
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start. –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –µ–≥–æ —Ä–æ–ª–∏
    –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏.
    """
    telegram_id = update.effective_user.id
    logger.info(f"üì© /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")

    try:
        user = await sync_to_async(CustomUser.objects.filter(telegram_id=telegram_id).first)()

        if user:
            role = "admin" if user.is_superuser else "staff" if user.is_staff else "customer"
            logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: {user.username}, —Ä–æ–ª—å: {role}")

            if user.is_superuser:
                await admin_start(update, context, user)
            elif user.is_staff:
                await staff_start(update, context)
            else:
                await customer_start(update, context)
        else:
            logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å Telegram ID {telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î.")
            await new_user_start(update, context)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ start(): {e}", exc_info=True)
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# ======== –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ ========
async def handle_user_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    user_text = update.message.text.strip()
    telegram_id = update.effective_user.id

    # ‚úÖ –ï—Å–ª–∏ –±–æ—Ç –∂–¥—ë—Ç –≤–≤–æ–¥ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if context.user_data.get("state") == "AWAIT_USER_ID":
        logger.info(f"üì• –ü–µ—Ä–µ–¥–∞—ë–º –≤ handle_user_status_update_request: {user_text}")
        await handle_user_status_update_request(update, context)
        return

    # ‚úÖ –ï—Å–ª–∏ –±–æ—Ç –∂–¥—ë—Ç –≤–≤–æ–¥ –ª–æ–≥–∏–Ω–∞ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞
    if context.user_data.get("state") == "AWAIT_LINK":
        logger.info(f"üì• –ü–µ—Ä–µ–¥–∞—ë–º –≤ handle_new_user_link_input: {user_text}")
        await handle_new_user_link_input(update, context)
        return

    # ‚úÖ –ï—Å–ª–∏ –±–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –æ–¥–Ω–æ–º –∏–∑ —à–∞–≥–æ–≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    if context.user_data.get("state") in STATE_HANDLERS:
        current_state = context.user_data.get("state")
        logger.info(f"üì• –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: —Å–æ—Å—Ç–æ—è–Ω–∏–µ {current_state} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")
        await STATE_HANDLERS[current_state](update, context)
        return

    logger.info(f"üì® –¢–µ–∫—Å—Ç –æ—Ç {telegram_id}: {user_text}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏)
    role = cache.get(f"user_role_{telegram_id}")
    if not role:
        user = await sync_to_async(CustomUser.objects.filter(telegram_id=telegram_id).first)()
        if user:
            role = "admin" if user.is_superuser else "manager" if user.is_staff else "customer"
            cache.set(f"user_role_{telegram_id}", role, timeout=3600)
        else:
            role = "new_user"

    logger.info(f"üîç –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ —Ä–æ–ª—å: {role}")

    # ‚úÖ –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∫–æ–º–∞–Ω–¥–æ–π –≤ TEXT_ACTIONS
    action = TEXT_ACTIONS.get(user_text)
    if action:
        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞: {action.__name__} –¥–ª—è –∫–æ–º–∞–Ω–¥—ã '{user_text}'")
        await action(update, context)
        return

    # ‚úÖ –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—â–µ–º —É–º–Ω—ã–π –æ—Ç–≤–µ—Ç
    smart_reply = get_smart_reply(user_text)
    if smart_reply != TEXT_RESPONSES["default"]:
        logger.info(f"ü§ñ –£–º–Ω—ã–π –æ—Ç–≤–µ—Ç: {smart_reply}")
        await update.message.reply_text(smart_reply)
        return

    # ‚úÖ –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äì –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: '{user_text}' –æ—Ç {telegram_id}")
    await update.message.reply_text(
        "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –º–µ–Ω—é. ü§î"
    )


# ======== –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∫–Ω–æ–ø–æ–∫ ========
async def handle_inline_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ (—Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö callback'–æ–≤).
    """
    query = update.callback_query
    await query.answer()

    callback_data = query.data
    logger.info(f"üîç –ü–æ–ª—É—á–µ–Ω callback_data: {callback_data}")

    # üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    action_func = CALLBACK_ACTIONS.get(callback_data)

    # üîπ –ï—Å–ª–∏ –Ω–µ—Ç —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è, –∏—â–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, user_status_update:19:true)
    if not action_func:
        for key in CALLBACK_ACTIONS.keys():
            if callback_data.startswith(key):  # –ï—Å–ª–∏ –Ω–∞—á–∞–ª–æ —Å–æ–≤–ø–∞–¥–∞–µ—Ç
                action_func = CALLBACK_ACTIONS[key]
                break

    if action_func:
        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫: {action_func.__name__} –¥–ª—è callback_data={callback_data}")

        try:
            await action_func(update, context)  # –í—ã–∑—ã–≤–∞–µ–º –±–µ–∑ –ø–µ—Ä–µ–¥–∞—á–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ '{callback_data}': {e}", exc_info=True)
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    else:
        logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ callback_data: {callback_data}")
        await query.edit_message_text("‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
