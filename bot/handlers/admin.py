# bot/handlers/admin.py

import logging
from django.db.models import Count

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from asgiref.sync import sync_to_async
from datetime import datetime, timedelta  # –î–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
from bot.keyboards.admin_keyboards import admin_keyboard
from bot.utils.callback_parser import parse_callback_data
from users.models import CustomUser
from catalog.models import Order
from prettytable import PrettyTable
from bot.utils.access_control import check_access
from bot.utils.messaging import send_message


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO)

# –°–ª–æ–≤–∞—Ä—å –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
STATUS_TRANSLATION = {
    "created": "–ù–æ–≤—ã–π",
    "processing": "–í –ø—Ä–æ—Ü–µ—Å—Å–µ",
    "shipped": "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω",
    "delivered": "–î–æ—Å—Ç–∞–≤–ª–µ–Ω",
    "canceled": "–û—Ç–º–µ–Ω—ë–Ω"
}


# ======= –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start =======
async def admin_start(update: Update, context: ContextTypes.DEFAULT_TYPE, user: CustomUser):

    """
    –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
    """
    try:
        user = await sync_to_async(CustomUser.objects.get)(telegram_id=update.effective_user.id)
        await update.message.reply_text(
            f"üëë –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.username} (–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä)!\n"
            "üíª –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞\n"
            "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏\n"
            "üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏\n"
            "‚ÑπÔ∏è –ü–æ–º–æ—â—å",
            reply_markup=admin_keyboard,
        )
    except CustomUser.DoesNotExist:
        logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å Telegram ID {update.effective_user.id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await update.message.reply_text("–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_start: {e}", exc_info=True)
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# ======= –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã '‚ÑπÔ∏è –ü–æ–º–æ—â—å' =======
async def handle_admin_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã '‚ÑπÔ∏è –ü–æ–º–æ—â—å' –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
    """
    await update.message.reply_text(
        "üëë **–ü–æ–º–æ—â—å –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:**\n\n"
        "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞\n"
        "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏\n"
        "üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏\n"
        "‚ÑπÔ∏è –ü–æ–º–æ—â—å"
    )

# ======= –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã 'üì¶ –ó–∞–∫–∞–∑—ã' =======
async def handle_admin_orders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã 'üì¶ –ó–∞–∫–∞–∑—ã'.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤ + –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    """
    try:
        all_orders = await sync_to_async(lambda: list(Order.objects.select_related("user").all()))()
        if not all_orders:
            await update.message.reply_text("‚ùå –ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
            return

        # ‚úÖ –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É —Å –∑–∞–∫–∞–∑–∞–º–∏
        table = PrettyTable(["ID", "–î–∞—Ç–∞", "–°—Ç–∞—Ç—É—Å", "–°—É–º–º–∞", "–ö–ª–∏–µ–Ω—Ç"])
        for order in all_orders:
            translated_status = STATUS_TRANSLATION.get(order.status, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å")  # –ü–µ—Ä–µ–≤–æ–¥ —Å—Ç–∞—Ç—É—Å–∞
            table.add_row([
                order.id,
                order.created_at.strftime("%Y-%m-%d %H:%M"),
                translated_status,
                f"{order.total_price:.2f} —Ä—É–±." if order.total_price else "0.00 —Ä—É–±.",
                order.user.username if order.user else "–ù–µ —É–∫–∞–∑–∞–Ω",
            ])

        table_str = table.get_string()
        await update.message.reply_text(f"<pre>{table_str}</pre>", parse_mode="HTML")

        # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞
        keyboard = [
            [InlineKeyboardButton("üÜï –ù–æ–≤—ã–µ", callback_data="orders_new")],
            [InlineKeyboardButton("üîÑ –í –ø—Ä–æ—Ü–µ—Å—Å–µ", callback_data="orders_processing")],
            [InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ", callback_data="orders_completed")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text("üì¶ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–∫–∞–∑–æ–≤:", reply_markup=reply_markup)

    except Exception as e:
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")



# ======= –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞ =======
async def handle_order_details(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π.
    """
    query = update.callback_query
    await query.answer()

    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–∫–∞–∑–∞ –∏–∑ callback_data
        order_id = int(query.data.split(":")[1])
        order = await sync_to_async(Order.objects.select_related("user").get)(id=order_id)

        # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å—Ç–∞—Ç—É—Å
        translated_status = STATUS_TRANSLATION.get(order.status, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å")

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–∫–∞–∑–∞
        order_info = (
            f"üì¶ **–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ #{order.id}**\n"
            f"üìÖ –î–∞—Ç–∞: {order.created_at.strftime('%Y-%m-%d %H:%M')}\n"
            f"üìå –°—Ç–∞—Ç—É—Å: {translated_status}\n"
            f"üí∞ –°—É–º–º–∞: {order.total_price:.2f} —Ä—É–±.\n"
            f"üë§ –ö–ª–∏–µ–Ω—Ç: {order.user.username if order.user else '–ù–µ —É–∫–∞–∑–∞–Ω'}"
        )

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
        keyboard = []

        # –ï—Å–ª–∏ –∑–∞–∫–∞–∑ "–ù–æ–≤—ã–π", –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        if order.status == "created":  # ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Å "–ù–æ–≤—ã–π" –Ω–∞ "created"
            keyboard.append([InlineKeyboardButton("üë∑ –ù–∞–∑–Ω–∞—á–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è", callback_data=f"assign_executor:{order.id}")])

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
        # keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="orders_new")])

        reply_markup = InlineKeyboardMarkup(keyboard)

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–∫–∞–∑–∞ –∏ –∫–Ω–æ–ø–∫–∞–º–∏
        await query.edit_message_text(order_info, parse_mode="Markdown", reply_markup=reply_markup)

        logger.info(f"üì¶ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ #{order.id}")

    except ValueError:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∑–∞–∫–∞–∑–∞.")
    except Order.DoesNotExist:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_order_details: {e}", exc_info=True)
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞.")




# ======= –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üÜï –ù–æ–≤—ã–µ" =======
async def handle_orders_by_status_new(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üÜï –ù–æ–≤—ã–µ".
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "–ù–æ–≤—ã–π" –∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π.
    """
    query = update.callback_query
    await query.answer()

    try:
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–∫–∞–∑—ã –ø–æ —Å—Ç–∞—Ç—É—Å—É "created" –≤–º–µ—Å—Ç–æ "–ù–æ–≤—ã–π"
        new_orders = await sync_to_async(lambda: list(Order.objects.filter(status="created").select_related("user")))()
        if not new_orders:
            await query.edit_message_text("‚ùå –ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤.")
            return

        # –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É
        table = PrettyTable(["ID", "–î–∞—Ç–∞", "–°—É–º–º–∞", "–ö–ª–∏–µ–Ω—Ç"])
        for order in new_orders:
            table.add_row([
                order.id,
                order.created_at.strftime("%Y-%m-%d %H:%M"),
                f"{order.total_price:.2f} —Ä—É–±." if order.total_price else "0.00 —Ä—É–±.",
                order.user.username if order.user else "–ù–µ —É–∫–∞–∑–∞–Ω",
            ])

        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        table_str = table.get_string()
        await query.message.reply_text(f"üì¶ **–ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã:**\n```\n{table_str}\n```", parse_mode="Markdown")

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π
        keyboard = [
            [InlineKeyboardButton(f"üìå –ó–∞–∫–∞–∑ #{order.id}", callback_data=f"order_details:{order.id}")]
            for order in new_orders
        ]
        # keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_orders")])

        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", reply_markup=reply_markup)

        logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ ({len(new_orders)} —à—Ç.)")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_orders_by_status_new: {e}", exc_info=True)
        await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–æ–≤.")





# ======= –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è =======
async def handle_assign_executor(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üë∑ –ù–∞–∑–Ω–∞—á–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è".
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å –æ–¥–Ω–æ–≥–æ.
    """
    query = update.callback_query
    await query.answer()

    try:
        order_id = int(query.data.split(":")[1])
        order = await sync_to_async(Order.objects.select_related("user").get)(id=order_id)

        if order.status != "created":
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: —ç—Ç–æ—Ç –∑–∞–∫–∞–∑ –Ω–µ–ª—å–∑—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å.")
            return

        if order.executor:
            await query.edit_message_text(f"‚ö†Ô∏è –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω: {order.executor.username}.")
            return

        # –§–∏–ª—å—Ç—Ä: –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ —Å –º–µ–Ω–µ–µ —á–µ–º 3 –∑–∞–∫–∞–∑–∞–º–∏
        executors = await sync_to_async(lambda: list(
            CustomUser.objects.filter(is_staff=True).annotate(order_count=Count('executor_orders')).filter(order_count__lt=3)
        ))()

        if not executors:
            await query.edit_message_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π.")
            return

        keyboard = [
            [InlineKeyboardButton(f"{executor.username} (ID: {executor.id})", callback_data=f"set_executor:{order_id}:{executor.id}")]
            for executor in executors
        ]
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"order_details:{order_id}")])

        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:", reply_markup=reply_markup)

        logger.info(f"üë∑ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π ({len(executors)} —á–µ–ª.) –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id}")

    except ValueError:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∑–∞–∫–∞–∑–∞.")
    except Order.DoesNotExist:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_assign_executor: {e}", exc_info=True)
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")



# ======= –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –Ω–∞ –∑–∞–∫–∞–∑ =======
async def handle_set_executor(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è.
    –ù–∞–∑–Ω–∞—á–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –Ω–∞ –∑–∞–∫–∞–∑.
    """
    query = update.callback_query
    await query.answer()

    try:
        _, order_id, executor_id = query.data.split(":")
        order_id, executor_id = int(order_id), int(executor_id)

        order = await sync_to_async(Order.objects.select_related("user").get)(id=order_id)
        executor = await sync_to_async(CustomUser.objects.get)(id=executor_id, is_staff=True)

        if order.executor:
            await query.edit_message_text(f"‚ö†Ô∏è –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω: {order.executor.username}.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –º–µ–Ω–µ–µ 3 –∑–∞–∫–∞–∑–æ–≤
        executor_orders_count = await sync_to_async(lambda: executor.executor_orders.count())()
        if executor_orders_count >= 3:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: —É —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è —É–∂–µ 3 –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–∞.")
            return

        order.executor = executor
        order.status = "processing"
        await sync_to_async(order.save)()

        await query.edit_message_text(f"‚úÖ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å **{executor.username}** –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞ –∑–∞–∫–∞–∑ #{order.id}. –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ'.")

        logger.info(f"‚úÖ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å {executor.username} (ID {executor.id}) –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞ –∑–∞–∫–∞–∑ #{order.id}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é
        await send_message(
            context,  # –ü–µ—Ä–µ–¥–∞—ë–º —Å–∞–º `context`, –∞ –Ω–µ `context.application.bot`
            executor.telegram_id,
            f"üì¶ –í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order.id}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–µ—Ç–∞–ª–∏ –≤ —Å–∏—Å—Ç–µ–º–µ."
        )

    except ValueError:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
    except Order.DoesNotExist:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except CustomUser.DoesNotExist:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_set_executor: {e}", exc_info=True)
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è.")




# ======= –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üîÑ –í –ø—Ä–æ—Ü–µ—Å—Å–µ" =======
async def handle_orders_processing(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∑–∞–∫–∞–∑—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '–í –ø—Ä–æ—Ü–µ—Å—Å–µ'.
    """
    query = update.callback_query
    await query.answer()

    try:
        processing_orders = await sync_to_async(lambda: list(
            Order.objects.select_related("user").filter(status="processing")
        ))()

        if not processing_orders:
            await query.edit_message_text("üîÑ –ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ '–í –ø—Ä–æ—Ü–µ—Å—Å–µ'.")
            return

        table = PrettyTable(["ID", "–î–∞—Ç–∞", "–°—É–º–º–∞", "–ö–ª–∏–µ–Ω—Ç"])
        for order in processing_orders:
            table.add_row([
                order.id,
                order.created_at.strftime("%Y-%m-%d %H:%M"),
                f"{order.total_price:.2f} —Ä—É–±.",
                order.user.username if order.user else "–ù–µ —É–∫–∞–∑–∞–Ω",
            ])

        table_str = table.get_string()
        await query.edit_message_text(f"üîÑ **–ó–∞–∫–∞–∑—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ:**\n```\n{table_str}\n```", parse_mode="Markdown")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_orders_processing: {e}", exc_info=True)
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–æ–≤.")


# ======= –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "‚úÖ –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ" =======
async def handle_orders_completed(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∑–∞–∫–∞–∑—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '–ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ'.
    """
    query = update.callback_query
    await query.answer()

    try:
        completed_orders = await sync_to_async(lambda: list(
            Order.objects.select_related("user").filter(status="delivered")
        ))()

        if not completed_orders:
            await query.edit_message_text("‚úÖ –ù–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.")
            return

        table = PrettyTable(["ID", "–î–∞—Ç–∞", "–°—É–º–º–∞", "–ö–ª–∏–µ–Ω—Ç"])
        for order in completed_orders:
            table.add_row([
                order.id,
                order.created_at.strftime("%Y-%m-%d %H:%M"),
                f"{order.total_price:.2f} —Ä—É–±.",
                order.user.username if order.user else "–ù–µ —É–∫–∞–∑–∞–Ω",
            ])

        table_str = table.get_string()
        await query.edit_message_text(f"‚úÖ **–ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã:**\n```\n{table_str}\n```", parse_mode="Markdown")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_orders_completed: {e}", exc_info=True)
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–æ–≤.")




# ======= –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã 'üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏' =======
async def handle_admin_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã 'üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏'.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è ID.
    """
    try:
        users = await sync_to_async(lambda: list(CustomUser.objects.filter(is_superuser=False)))()
        if not users:
            await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return

        table = PrettyTable(["ID", "–ò–º—è", "Email", "–°—Ç–∞—Ç—É—Å"])
        for user in users:
            status = "–°–æ—Ç—Ä—É–¥–Ω–∏–∫" if user.is_staff else "–ö–ª–∏–µ–Ω—Ç"
            table.add_row([user.id, user.username, user.email, status])

        table_str = table.get_string()
        await update.message.reply_text(
            f"–°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏ –∫–ª–∏–µ–Ω—Ç–æ–≤:\n```\n{table_str}\n```",
            parse_mode="Markdown",
        )

        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞:")

        context.user_data["state"] = "AWAIT_USER_ID"  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_admin_users: {e}", exc_info=True)
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# ======= –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è =======
async def handle_user_status_update_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞.
    """
    try:
        entered_user_id = int(update.message.text.strip())  # –ü–∞—Ä—Å–∏–º ID
        logger.info(f"üîç –í–≤–µ–¥—ë–Ω ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {entered_user_id}")

        user = await sync_to_async(CustomUser.objects.get)(id=entered_user_id, is_superuser=False)

        status = "–°–æ—Ç—Ä—É–¥–Ω–∏–∫" if user.is_staff else "–ö–ª–∏–µ–Ω—Ç"
        user_info = (
            f"üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å #{user.id}**\n"
            f"–ò–º—è: {user.username}\n"
            f"Email: {user.email}\n"
            f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {status}"
        )

        keyboard = [
            [
                InlineKeyboardButton("–°–¥–µ–ª–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º", callback_data=f"user_status_update:{user.id}:true"),
                InlineKeyboardButton("–°–¥–µ–ª–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–º", callback_data=f"user_status_update:{user.id}:false"),
            ],
            [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_user_status")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(user_info, parse_mode="Markdown", reply_markup=reply_markup)

        context.user_data["state"] = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

    except ValueError:
        logger.warning("‚õî –í–≤–µ–¥—ë–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    except CustomUser.DoesNotExist:
        logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {entered_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_user_status_update_request: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")



# ======= Callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è =======
async def update_user_status_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∫–Ω–æ–ø–æ–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    query = update.callback_query
    await query.answer()

    try:
        parts = query.data.split(":")
        if len(parts) != 3:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data: {query.data}")
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞.")
            return

        action, user_id, is_staff_str = parts
        user_id = int(user_id)
        is_staff = is_staff_str.lower() == "true"

        user = await sync_to_async(CustomUser.objects.get)(id=user_id)

        user.is_staff = is_staff
        await sync_to_async(user.save)()

        new_status = "–°–æ—Ç—Ä—É–¥–Ω–∏–∫" if user.is_staff else "–ö–ª–∏–µ–Ω—Ç"
        await query.edit_message_text(f"‚úÖ –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è #{user.id} –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ '{new_status}'.")
        logger.info(f"‚úÖ –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è #{user.id} –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ '{new_status}'.")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ update_user_status_callback: {e}", exc_info=True)
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞.")


async def cancel_user_status_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û—Ç–º–µ–Ω–∞' –≤ inline-–∫–Ω–æ–ø–∫–∞—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –û—Ç–≤–µ—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, —É–±–∏—Ä–∞—è –∫–Ω–æ–ø–∫–∏.
    """
    query = update.callback_query
    await query.answer("üö´ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", show_alert=True)

    try:
        # –£–±–∏—Ä–∞–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ
        await query.edit_message_text("‚ö†Ô∏è –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–Ω–æ–≤–æ.")
        logger.info(f"üö´ –û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è: {query.message.chat.id}")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ cancel_user_status_callback: {e}", exc_info=True)
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –¥–µ–π—Å—Ç–≤–∏—è.")





# ======= –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ =======
def get_analytics_buttons():
    keyboard = [
        [InlineKeyboardButton("–°–µ–≥–æ–¥–Ω—è", callback_data="analytics_today")],
        [InlineKeyboardButton("–ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π", callback_data="analytics_week")],
        [InlineKeyboardButton("–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü", callback_data="analytics_month")],
        [InlineKeyboardButton("–¢–µ–∫—É—â–∏–π –≥–æ–¥", callback_data="analytics_year")],
        [InlineKeyboardButton("–í—Å—ë –≤—Ä–µ–º—è", callback_data="analytics_all_time")],
        [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="analytics_cancel")],
    ]
    return InlineKeyboardMarkup(keyboard)



# ======= –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫—É =======
async def handle_admin_analytics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫—É. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞.
    """
    await update.message.reply_text(
        text="üìä **–ê–Ω–∞–ª–∏—Ç–∏–∫–∞:**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:",
        reply_markup=get_analytics_buttons(),
        parse_mode="Markdown",
    )

async def analytics_today(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è.
    """
    query = update.callback_query
    await query.answer()

    try:
        filter_kwargs = {"created_at__date": datetime.now().date()}
        analytics_text = await get_analytics_text("–°–µ–≥–æ–¥–Ω—è", filter_kwargs)
        await query.edit_message_text(analytics_text, parse_mode="Markdown")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ analytics_today: {e}", exc_info=True)
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏.")


async def analytics_week(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π.
    """
    query = update.callback_query
    await query.answer()

    try:
        filter_kwargs = {"created_at__gte": datetime.now().date() - timedelta(days=7)}
        analytics_text = await get_analytics_text("–ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π", filter_kwargs)
        await query.edit_message_text(analytics_text, parse_mode="Markdown")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ analytics_week: {e}", exc_info=True)
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏.")


async def analytics_month(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü.
    """
    query = update.callback_query
    await query.answer()

    try:
        filter_kwargs = {
            "created_at__month": datetime.now().month,
            "created_at__year": datetime.now().year,
        }
        analytics_text = await get_analytics_text("–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü", filter_kwargs)
        await query.edit_message_text(analytics_text, parse_mode="Markdown")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ analytics_month: {e}", exc_info=True)
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏.")


async def analytics_year(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∑–∞ —Ç–µ–∫—É—â–∏–π –≥–æ–¥.
    """
    query = update.callback_query
    await query.answer()

    try:
        filter_kwargs = {"created_at__year": datetime.now().year}
        analytics_text = await get_analytics_text("–¢–µ–∫—É—â–∏–π –≥–æ–¥", filter_kwargs)
        await query.edit_message_text(analytics_text, parse_mode="Markdown")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ analytics_year: {e}", exc_info=True)
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏.")


async def analytics_all_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è.
    """
    query = update.callback_query
    await query.answer()

    try:
        filter_kwargs = {}  # –í—Å–µ –∑–∞–∫–∞–∑—ã –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        analytics_text = await get_analytics_text("–í—Å—ë –≤—Ä–µ–º—è", filter_kwargs)
        await query.edit_message_text(analytics_text, parse_mode="Markdown")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ analytics_all_time: {e}", exc_info=True)
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏.")


async def analytics_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û—Ç–º–µ–Ω–∞ –∑–∞–ø—Ä–æ—Å–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏.
    """
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("üîô –í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏.")


async def get_analytics_text(title: str, filter_kwargs: dict) -> str:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º.
    """
    total_orders = await sync_to_async(lambda: Order.objects.filter(**filter_kwargs).count())()
    total_revenue = await sync_to_async(
        lambda: sum(order.total_price for order in Order.objects.filter(**filter_kwargs))
    )()
    average_order_value = total_revenue / total_orders if total_orders > 0 else 0
    total_users = await sync_to_async(lambda: CustomUser.objects.count())()

    analytics_text = (
        f"üìä **–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∑–∞ {title}:**\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: **{total_users}**\n"
        f"üì¶ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: **{total_orders}**\n"
        f"üí∞ –û–±—â–∏–π –¥–æ—Ö–æ–¥: **{total_revenue:.2f} ‚ÇΩ**\n"
        f"üßæ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: **{average_order_value:.2f} ‚ÇΩ**"
    )
    return analytics_text
