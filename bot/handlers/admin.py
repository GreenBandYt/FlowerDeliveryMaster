# bot/handlers/admin.py

import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from asgiref.sync import sync_to_async
from datetime import datetime, timedelta  # –î–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
from bot.keyboards.admin_keyboards import admin_keyboard
from bot.utils.callback_parser import parse_callback_data
from users.models import CustomUser
from catalog.models import Order
from prettytable import PrettyTable

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO)


# ======= –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start =======
async def admin_start(update: Update, context: ContextTypes.DEFAULT_TYPE, user: CustomUser):

    """
    –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
    """
    try:
        user = await sync_to_async(CustomUser.objects.get)(telegram_id=update.effective_user.id)
        await update.message.reply_text(
            f"üëë –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.username} (–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä)!\n"
            "üíª –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞\n"
            "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏\n"
            "üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏\n"
            "‚ÑπÔ∏è –ü–æ–º–æ—â—å",
            reply_markup=admin_keyboard,
        )
    except CustomUser.DoesNotExist:
        logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å Telegram ID {update.effective_user.id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await update.message.reply_text("–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_start: {e}", exc_info=True)
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# ======= –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã '‚ÑπÔ∏è –ü–æ–º–æ—â—å' =======
async def handle_admin_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã '‚ÑπÔ∏è –ü–æ–º–æ—â—å' –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
    """
    await update.message.reply_text(
        "üëë **–ü–æ–º–æ—â—å –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:**\n\n"
        "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞\n"
        "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏\n"
        "üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏\n"
        "‚ÑπÔ∏è –ü–æ–º–æ—â—å"
    )
# ======= –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã 'üì¶ –ó–∞–∫–∞–∑—ã' =======
async def handle_admin_orders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã 'üì¶ –ó–∞–∫–∞–∑—ã'.
    –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤.
    """
    try:
        all_orders = await sync_to_async(lambda: list(Order.objects.select_related("user").all()))()
        if not all_orders:
            await update.message.reply_text("–ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
            return

        table = PrettyTable(["ID", "–î–∞—Ç–∞", "–°—Ç–∞—Ç—É—Å", "–°—É–º–º–∞", "–ö–ª–∏–µ–Ω—Ç"])
        for order in all_orders:
            table.add_row([
                order.id,
                order.created_at.strftime("%Y-%m-%d %H:%M"),
                order.get_status_display(),
                f"{order.total_price:.2f} —Ä—É–±." if order.total_price else "0.00 —Ä—É–±.",
                order.user.username if order.user else "–ù–µ —É–∫–∞–∑–∞–Ω",
            ])

        table_str = table.get_string()
        MAX_MESSAGE_LENGTH = 4000
        lines = table_str.split("\n")
        chunk = ""
        for line in lines:
            if len(chunk) + len(line) + 1 > MAX_MESSAGE_LENGTH:
                await update.message.reply_text(f"<pre>{chunk}</pre>", parse_mode="HTML")
                chunk = line + "\n"
            else:
                chunk += line + "\n"

        if chunk:
            await update.message.reply_text(f"<pre>{chunk}</pre>", parse_mode="HTML")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_admin_orders: {e}", exc_info=True)
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# ======= –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞ =======
async def handle_order_details(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞.
    """
    try:
        order_id = int(update.message.text)
        order = await sync_to_async(Order.objects.select_related("user").get)(id=order_id)

        order_info = (
            f"üì¶ **–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ #{order.id}**\n"
            f"üìÖ –î–∞—Ç–∞: {order.created_at.strftime('%Y-%m-%d %H:%M')}\n"
            f"üìå –°—Ç–∞—Ç—É—Å: {order.get_status_display()}\n"
            f"üí∞ –°—É–º–º–∞: {order.total_price:.2f} —Ä—É–±.\n"
            f"üë§ –ö–ª–∏–µ–Ω—Ç: {order.user.username if order.user else '–ù–µ —É–∫–∞–∑–∞–Ω'}"
        )

        keyboard = [
            [
                InlineKeyboardButton("–ù–æ–≤—ã–π", callback_data=f"order_status_update:{order.id}:new"),
                InlineKeyboardButton("–í –ø—Ä–æ—Ü–µ—Å—Å–µ", callback_data=f"order_status_update:{order.id}:processing"),
                InlineKeyboardButton("–ó–∞–≤–µ—Ä—à—ë–Ω", callback_data=f"order_status_update:{order.id}:completed"),
            ],
            [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_order_status")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(order_info, parse_mode="Markdown", reply_markup=reply_markup)

    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞.")
    except Order.DoesNotExist:
        await update.message.reply_text("–ó–∞–∫–∞–∑ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_order_details: {e}", exc_info=True)
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞.")

# ======= –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã 'üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏' =======
async def handle_admin_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã 'üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏' –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    """
    try:
        users = await sync_to_async(lambda: list(CustomUser.objects.filter(is_superuser=False)))()
        if not users:
            await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return

        table = PrettyTable(["ID", "–ò–º—è", "Email", "–°—Ç–∞—Ç—É—Å"])
        for user in users:
            status = "–°–æ—Ç—Ä—É–¥–Ω–∏–∫" if user.is_staff else "–ö–ª–∏–µ–Ω—Ç"
            table.add_row([user.id, user.username, user.email, status])

        table_str = table.get_string()
        await update.message.reply_text(
            f"–°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏ –∫–ª–∏–µ–Ω—Ç–æ–≤:\n```\n{table_str}\n```",
            parse_mode="Markdown",
        )
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞:")

        context.user_data["state"] = "AWAIT_USER_ID"

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_admin_users: {e}", exc_info=True)
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# ======= –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è =======
async def handle_user_status_update_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞.
    """
    try:
        if context.user_data.get("state") != "AWAIT_USER_ID":
            await update.message.reply_text("–í—ã –Ω–µ –≤ —Ä–µ–∂–∏–º–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            return

        entered_user_id = int(update.message.text.strip())
        user = await sync_to_async(CustomUser.objects.get)(id=entered_user_id, is_superuser=False)

        status = "–°–æ—Ç—Ä—É–¥–Ω–∏–∫" if user.is_staff else "–ö–ª–∏–µ–Ω—Ç"
        user_info = (
            f"üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å #{user.id}**\n"
            f"–ò–º—è: {user.username}\n"
            f"Email: {user.email}\n"
            f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {status}"
        )

        keyboard = [
            [
                InlineKeyboardButton("–°–¥–µ–ª–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º", callback_data=f"user_status_update:{user.id}:true"),
                InlineKeyboardButton("–°–¥–µ–ª–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–º", callback_data=f"user_status_update:{user.id}:false"),
            ],
            [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_user_status")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(user_info, parse_mode="Markdown", reply_markup=reply_markup)

        context.user_data["state"] = None

    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    except CustomUser.DoesNotExist:
        await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_user_status_update_request: {e}", exc_info=True)
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# ======= Callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è =======
async def update_user_status_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∫–Ω–æ–ø–æ–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    query = update.callback_query
    await query.answer()

    try:
        action, params = parse_callback_data(query.data)
        if action == "cancel_user_status":
            await query.edit_message_text("‚ö†Ô∏è –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
            return

        user_id, is_staff = params
        user = await sync_to_async(CustomUser.objects.get)(id=user_id)

        user.is_staff = is_staff.lower() == "true"
        await sync_to_async(user.save)()

        new_status = "–°–æ—Ç—Ä—É–¥–Ω–∏–∫" if user.is_staff else "–ö–ª–∏–µ–Ω—Ç"
        await query.edit_message_text(f"‚úÖ –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è #{user.id} –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ '{new_status}'.")
        logger.info(f"–°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è #{user.id} –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ '{new_status}'.")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ update_user_status_callback: {e}", exc_info=True)
        await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞.")

# ======= –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ =======
def get_analytics_buttons():
    keyboard = [
        [InlineKeyboardButton("–°–µ–≥–æ–¥–Ω—è", callback_data="analytics_today")],
        [InlineKeyboardButton("–ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π", callback_data="analytics_week")],
        [InlineKeyboardButton("–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü", callback_data="analytics_month")],
        [InlineKeyboardButton("–¢–µ–∫—É—â–∏–π –≥–æ–¥", callback_data="analytics_year")],
        [InlineKeyboardButton("–í—Å—ë –≤—Ä–µ–º—è", callback_data="analytics_all_time")],
        [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="analytics_cancel")],
    ]
    return InlineKeyboardMarkup(keyboard)



# ======= –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫—É =======
async def handle_admin_analytics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫—É. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞.
    """
    await update.message.reply_text(
        text="üìä **–ê–Ω–∞–ª–∏—Ç–∏–∫–∞:**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:",
        reply_markup=get_analytics_buttons(),
        parse_mode="Markdown",
    )

async def analytics_today(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è.
    """
    query = update.callback_query
    await query.answer()

    try:
        filter_kwargs = {"created_at__date": datetime.now().date()}
        analytics_text = await get_analytics_text("–°–µ–≥–æ–¥–Ω—è", filter_kwargs)
        await query.edit_message_text(analytics_text, parse_mode="Markdown")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ analytics_today: {e}", exc_info=True)
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏.")


async def analytics_week(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π.
    """
    query = update.callback_query
    await query.answer()

    try:
        filter_kwargs = {"created_at__gte": datetime.now().date() - timedelta(days=7)}
        analytics_text = await get_analytics_text("–ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π", filter_kwargs)
        await query.edit_message_text(analytics_text, parse_mode="Markdown")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ analytics_week: {e}", exc_info=True)
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏.")


async def analytics_month(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü.
    """
    query = update.callback_query
    await query.answer()

    try:
        filter_kwargs = {
            "created_at__month": datetime.now().month,
            "created_at__year": datetime.now().year,
        }
        analytics_text = await get_analytics_text("–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü", filter_kwargs)
        await query.edit_message_text(analytics_text, parse_mode="Markdown")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ analytics_month: {e}", exc_info=True)
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏.")


async def analytics_year(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∑–∞ —Ç–µ–∫—É—â–∏–π –≥–æ–¥.
    """
    query = update.callback_query
    await query.answer()

    try:
        filter_kwargs = {"created_at__year": datetime.now().year}
        analytics_text = await get_analytics_text("–¢–µ–∫—É—â–∏–π –≥–æ–¥", filter_kwargs)
        await query.edit_message_text(analytics_text, parse_mode="Markdown")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ analytics_year: {e}", exc_info=True)
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏.")


async def analytics_all_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è.
    """
    query = update.callback_query
    await query.answer()

    try:
        filter_kwargs = {}  # –í—Å–µ –∑–∞–∫–∞–∑—ã –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        analytics_text = await get_analytics_text("–í—Å—ë –≤—Ä–µ–º—è", filter_kwargs)
        await query.edit_message_text(analytics_text, parse_mode="Markdown")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ analytics_all_time: {e}", exc_info=True)
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏.")


async def analytics_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û—Ç–º–µ–Ω–∞ –∑–∞–ø—Ä–æ—Å–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏.
    """
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("üîô –í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏.")


async def get_analytics_text(title: str, filter_kwargs: dict) -> str:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º.
    """
    total_orders = await sync_to_async(lambda: Order.objects.filter(**filter_kwargs).count())()
    total_revenue = await sync_to_async(
        lambda: sum(order.total_price for order in Order.objects.filter(**filter_kwargs))
    )()
    average_order_value = total_revenue / total_orders if total_orders > 0 else 0
    total_users = await sync_to_async(lambda: CustomUser.objects.count())()

    analytics_text = (
        f"üìä **–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∑–∞ {title}:**\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: **{total_users}**\n"
        f"üì¶ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: **{total_orders}**\n"
        f"üí∞ –û–±—â–∏–π –¥–æ—Ö–æ–¥: **{total_revenue:.2f} ‚ÇΩ**\n"
        f"üßæ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: **{average_order_value:.2f} ‚ÇΩ**"
    )
    return analytics_text




#
# # ======= –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ =======
# async def analytics_period_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     """
#     –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ.
#     """
#     query = update.callback_query
#     await query.answer()
#
#     try:
#         action, params = parse_callback_data(query.data)
#         if action != "analytics_period":
#             await query.edit_message_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
#             return
#
#         period = params[0]
#         title = ""
#         filter_kwargs = {}
#
#         if period == "today":
#             filter_kwargs = {"created_at__date": datetime.now().date()}
#             title = "–°–µ–≥–æ–¥–Ω—è"
#         elif period == "week":
#             filter_kwargs = {"created_at__gte": datetime.now().date() - timedelta(days=7)}
#             title = "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π"
#         elif period == "month":
#             filter_kwargs = {
#                 "created_at__month": datetime.now().month,
#                 "created_at__year": datetime.now().year,
#             }
#             title = "–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü"
#         elif period == "year":
#             filter_kwargs = {"created_at__year": datetime.now().year}
#             title = "–¢–µ–∫—É—â–∏–π –≥–æ–¥"
#         elif period == "all":
#             filter_kwargs = {}
#             title = "–í—Å—ë –≤—Ä–µ–º—è"
#         elif period == "cancel":
#             await query.edit_message_text("üîô –í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏.")
#             return
#
#         # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
#         total_orders = await sync_to_async(lambda: Order.objects.filter(**filter_kwargs).count())()
#         total_revenue = await sync_to_async(
#             lambda: sum(order.total_price for order in Order.objects.filter(**filter_kwargs))
#         )()
#         average_order_value = total_revenue / total_orders if total_orders > 0 else 0
#         total_users = await sync_to_async(lambda: CustomUser.objects.count())()
#
#         analytics_text = (
#             f"üìä **–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∑–∞ {title}:**\n\n"
#             f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: **{total_users}**\n"
#             f"üì¶ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: **{total_orders}**\n"
#             f"üí∞ –û–±—â–∏–π –¥–æ—Ö–æ–¥: **{total_revenue:.2f} ‚ÇΩ**\n"
#             f"üßæ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: **{average_order_value:.2f} ‚ÇΩ**"
#         )
#         await query.edit_message_text(analytics_text, parse_mode="Markdown")
#
#     except Exception as e:
#         logger.error(f"–û—à–∏–±–∫–∞ –≤ analytics_period_handler: {e}", exc_info=True)
#         await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏.")
