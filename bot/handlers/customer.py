# bot/handlers/customer.py

import os
from PIL import Image
from telegram.constants import ParseMode  # –î–ª—è HTML-—Ä–∞–∑–º–µ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext, ContextTypes
from asgiref.sync import sync_to_async
from prettytable import PrettyTable
from catalog.models import Product, Cart, CartItem, Order, OrderItem
import logging
from users.models import CustomUser
from bot.keyboards.customer_keyboards import customer_keyboard
# from bot.handlers.customer import view_orders, view_cart, view_catalog, help
# from bot.handlers.admin import analytics, manage_users, orders

from telegram.constants import ParseMode
from PIL import Image
from textwrap import shorten
from bot.utils.time_utils import is_working_hours


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)

async def customer_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–ª–∏–µ–Ω—Ç–∞.
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ 'customer_start' –∏ —Ä–æ–ª—å 'customer', –∑–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π.
    """
    telegram_id = update.effective_user.id
    logger.info(f"[CUSTOMER_START] –ó–∞–ø—É—Å–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–æ–ª—å –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
    context.user_data["role"] = "customer"
    context.user_data["state"] = "customer_start"

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
    user = await sync_to_async(CustomUser.objects.filter(telegram_id=telegram_id).first)()

    if not user:
        logger.error(f"[CUSTOMER_START ERROR] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î!")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await update.message.reply_text(
        f"üå∏ –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.username}!\n"
        "üéâ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n"
        "üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã\n"
        "üõí –ö–æ—Ä–∑–∏–Ω–∞\n"
        "üõçÔ∏è –ö–∞—Ç–∞–ª–æ–≥\n"
        "‚ÑπÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å",
        reply_markup=customer_keyboard
    )

    logger.info(f"[CUSTOMER_START] –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}")

async def handle_customer_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –í—ã–≤–æ–¥ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞.
    """
    telegram_id = update.effective_user.id
    logger.info(f"[CUSTOMER_HELP] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–º–æ—â—å.")

    await update.message.reply_text(
        "‚ÑπÔ∏è *–ö–ª–∏–µ–Ω—Ç—Å–∫–∞—è –ø–æ–º–æ—â—å:*\n\n"
        "üì¶ *–ú–æ–∏ –∑–∞–∫–∞–∑—ã* - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–µ –∏ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã.\n"
        "üõí *–ö–æ—Ä–∑–∏–Ω–∞* - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –ø–µ—Ä–µ–¥ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º.\n"
        "üõçÔ∏è *–ö–∞—Ç–∞–ª–æ–≥* - –í—ã–±—Ä–∞—Ç—å —Ü–≤–µ—Ç—ã –∏ –±—É–∫–µ—Ç—ã –¥–ª—è –∑–∞–∫–∞–∑–∞.\n"
        "‚ÑπÔ∏è *–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å* - –ü–æ–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç!",
        parse_mode="Markdown"
    )


# ======= –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤ =======
# –§—É–Ω–∫—Ü–∏—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
def customer_resize_image(image_path, max_size=(512, 512)):
    """
    –£–º–µ–Ω—å—à–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ max_size –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ /tmp/, —á—Ç–æ–±—ã –Ω–µ –∏–∑–º–µ–Ω—è—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª.
    """
    try:
        with Image.open(image_path) as img:
            img.thumbnail(max_size)

            # –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ /tmp/
            resized_path = f"/tmp/{os.path.basename(image_path)}_resized.jpg"
            img.save(resized_path, "JPEG")

            return resized_path
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {image_path}: {e}")
        return image_path  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø—É—Ç—å, –µ—Å–ª–∏ —É–º–µ–Ω—å—à–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å

async def handle_customer_catalog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É.
    """
    telegram_id = update.effective_user.id
    logger.info(f"[CUSTOMER_CATALOG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –∑–∞–ø—Ä–æ—Å–∏–ª –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤.")

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –±–∞–∑—ã
        products = await sync_to_async(lambda: list(Product.objects.all()))()

        if not products:
            await update.message.reply_text("üì≠ –ö–∞—Ç–∞–ª–æ–≥ –ø–æ–∫–∞ –ø—É—Å—Ç. –ó–∞–≥–ª—è–Ω–∏—Ç–µ –ø–æ–∑–∂–µ!")
            return

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã –æ–¥–∏–Ω –∑–∞ –¥—Ä—É–≥–∏–º
        for product in products:
            text = (
                f"üì¶ *{product.name}*\n"
                f"üí∞ –¶–µ–Ω–∞: *{product.price:.2f}* —Ä—É–±.\n"
                f"‚ÑπÔ∏è {product.description}"
            )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            image_path = os.path.join("media", str(product.image))

            if os.path.exists(image_path):
                resized_image_path = customer_resize_image(image_path)

                # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É
                keyboard = [[InlineKeyboardButton(
                    "‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É",
                    callback_data=f"add_to_cart_{product.id}"
                )]]
                reply_markup = InlineKeyboardMarkup(keyboard)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ, —Ç–µ–∫—Å—Ç –∏ –∫–Ω–æ–ø–∫—É
                await context.bot.send_photo(
                    chat_id=update.message.chat_id,
                    photo=open(resized_image_path, "rb"),
                    caption=text,
                    parse_mode=ParseMode.MARKDOWN,
                    reply_markup=reply_markup
                )

                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —É–º–µ–Ω—å—à–µ–Ω–Ω—ã–π —Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω —Å–æ–∑–¥–∞–≤–∞–ª—Å—è
                if resized_image_path.startswith("/tmp/") and os.path.exists(resized_image_path):
                    os.remove(resized_image_path)
            else:
                logger.warning(f"[CUSTOMER_CATALOG] –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {image_path} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                await update.message.reply_text(f"{text}\n\n‚ùå *–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.*", parse_mode=ParseMode.MARKDOWN)

    except Exception as e:
        logger.exception(f"[CUSTOMER_CATALOG] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–∞–ª–æ–≥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–∞–ª–æ–≥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# ======= –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É =======
async def customer_add_to_cart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ callback-–∑–∞–ø—Ä–æ—Å—É.
    """
    query = update.callback_query
    user = query.from_user

    try:
        await query.answer()
        product_id = int(query.data.split('_')[-1])

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db_user = await sync_to_async(CustomUser.objects.get)(telegram_id=user.id)

        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        product = await sync_to_async(Product.objects.get)(id=product_id)

        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cart, _ = await sync_to_async(Cart.objects.get_or_create)(user=db_user)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ–≤–∞—Ä —É–∂–µ –≤ –∫–æ—Ä–∑–∏–Ω–µ
        cart_item, created = await sync_to_async(CartItem.objects.get_or_create)(
            cart=cart, product=product,
            defaults={"quantity": 1, "price": product.price}
        )

        if not created:
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –º–∞–∫—Å–∏–º—É–º 10 —à—Ç.)
            if cart_item.quantity >= 10:
                await query.message.reply_text("‚ö†Ô∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ —É–∂–µ –≤ –∫–æ—Ä–∑–∏–Ω–µ!")
                return

            cart_item.quantity += 1
            cart_item.price = cart_item.quantity * product.price
            await sync_to_async(cart_item.save)()

        logger.info(f"–¢–æ–≤–∞—Ä {product.name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username} ({user.id}).")

        # –û–±–Ω–æ–≤–ª—è–µ–º inline-–∫–Ω–æ–ø–∫—É
        keyboard = [[InlineKeyboardButton("‚úÖ –£–∂–µ –≤ –∫–æ—Ä–∑–∏–Ω–µ", callback_data="none")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_reply_markup(reply_markup=reply_markup)
        await query.message.reply_text(f"\U0001F4E6 –¢–æ–≤–∞—Ä '{product.name}' –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à—É –∫–æ—Ä–∑–∏–Ω—É!")

    except CustomUser.DoesNotExist:
        logger.error(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user.id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î.")
        await query.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Product.DoesNotExist:
        logger.error(f"‚ùå –¢–æ–≤–∞—Ä —Å ID {product_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await query.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É: {e}")
        await query.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É.")



# ======= –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ—Ä–∑–∏–Ω—ã =======
async def customer_view_cart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∫–æ—Ä–∑–∏–Ω—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∫–∞—Ä—Ç–æ—á–µ–∫ (–±–µ–∑ —Ñ–æ—Ç–æ) —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.
    """
    user = update.effective_user
    message = update.callback_query.message if update.callback_query else update.message

    try:
        logger.info(f"üõí –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} ({user.id}) –æ—Ç–∫—Ä—ã–ª –∫–æ—Ä–∑–∏–Ω—É.")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ—Ä–∑–∏–Ω–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cart_exists = await sync_to_async(Cart.objects.filter(user__telegram_id=user.id).exists)()
        if not cart_exists:
            await message.reply_text("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–∑–∏–Ω—ã
        cart_items = await sync_to_async(
            lambda: list(CartItem.objects.filter(cart__user__telegram_id=user.id).select_related('product'))
        )()

        if not cart_items:
            await message.reply_text("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
            return

        total_price = 0

        for item in cart_items:
            product = item.product
            total_price += item.price

            text = (
                f"üì¶ <b>{product.name}</b>\n"
                f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <b>{item.quantity}</b>\n"
                f"–¶–µ–Ω–∞: <b>{item.price} ‚ÇΩ</b>"
            )

            # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–º
            keyboard = [
                [
                    InlineKeyboardButton("‚ûñ", callback_data=f"decrease_{product.id}"),
                    InlineKeyboardButton(f"{item.quantity} —à—Ç.", callback_data="ignore"),
                    InlineKeyboardButton("‚ûï", callback_data=f"increase_{product.id}")
                ],
                [InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"remove_from_cart_{product.id}")]
            ]

            reply_markup = InlineKeyboardMarkup(keyboard)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —Ç–æ–≤–∞—Ä–∞ (–±–µ–∑ —Ñ–æ—Ç–æ)
            await message.reply_text(text, parse_mode="HTML", reply_markup=reply_markup)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è
        is_working_time = await sync_to_async(is_working_hours)()


        # –ï—Å–ª–∏ —Å–µ–π—á–∞—Å —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
        if is_working_time:
            checkout_markup = InlineKeyboardMarkup([[InlineKeyboardButton("üìù –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="checkout")]])
            await message.reply_text(f"üí∞ <b>–ò—Ç–æ–≥–æ: {total_price} ‚ÇΩ</b>", parse_mode="HTML", reply_markup=checkout_markup)
        else:
            await message.reply_text(f"üí∞ <b>–ò—Ç–æ–≥–æ: {total_price} ‚ÇΩ</b>\n\n‚ùå –°–µ–π—á–∞—Å –Ω–µ—Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è. –ó–∞–∫–∞–∑—ã –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Å 09:00 –¥–æ 18:00.", parse_mode="HTML")

    except Exception as e:
        logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∫–æ—Ä–∑–∏–Ω—ã: {e}")
        await message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ—Ä–∑–∏–Ω—ã.")

# ======= –£–º–µ–Ω—å—à–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ =======
async def customer_decrease_quantity(update: Update, context: CallbackContext):
    """
    –£–º–µ–Ω—å—à–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ.
    """
    query = update.callback_query
    user = update.effective_user

    try:
        product_id = int(query.data.split("_")[1])

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å—å —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ
        cart_item = await sync_to_async(
            lambda: CartItem.objects.filter(cart__user__telegram_id=user.id, product_id=product_id).select_related('product').first()
        )()

        if not cart_item:
            await query.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤–∞—à–µ–π –∫–æ—Ä–∑–∏–Ω–µ.")
            return

        if cart_item.quantity > 1:
            cart_item.quantity -= 1
            cart_item.price = cart_item.quantity * cart_item.product.price  # –ù–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å sync_to_async
            await sync_to_async(cart_item.save)()
            await query.answer(f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ —É–º–µ–Ω—å—à–µ–Ω–æ –¥–æ {cart_item.quantity}.")
        else:
            await query.answer("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–º–µ–Ω—å—à–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∏–∂–µ 1.")

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ—Ä–∑–∏–Ω—É
        await customer_view_cart(update, context)

    except Exception as e:
        logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–º–µ–Ω—å—à–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞: {e}")
        await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞.")

# ======= –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ =======
async def customer_increase_quantity(update: Update, context: CallbackContext):
    """
    –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ.
    """
    query = update.callback_query
    user = query.from_user

    try:
        product_id = int(query.data.split("_")[-1])

        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ
        cart_item = await sync_to_async(
            lambda: CartItem.objects.filter(cart__user__telegram_id=user.id, product_id=product_id).select_related(
                'product').first()
        )()

        if not cart_item:
            await query.answer("‚ö†Ô∏è –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤–∞—à–µ–π –∫–æ—Ä–∑–∏–Ω–µ.")
            return

        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        cart_item.quantity += 1
        cart_item.price = cart_item.quantity * cart_item.product.price  # –ë–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è sync_to_async
        await sync_to_async(cart_item.save)()

        await query.answer(f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ '{cart_item.product.name}' —É–≤–µ–ª–∏—á–µ–Ω–æ –¥–æ {cart_item.quantity}.")

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ—Ä–∑–∏–Ω—É
        await customer_view_cart(update, context)

    except Exception as e:
        logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ {product_id}: {e}")
        await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞.")

# ======= –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã =======
async def customer_remove_from_cart(update: Update, context: CallbackContext):
    """
    –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ callback-–∑–∞–ø—Ä–æ—Å—É.
    """
    query = update.callback_query
    user = query.from_user

    try:
        product_id = int(query.data.split("_")[-1])

        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ
        cart_item = await sync_to_async(
            lambda: CartItem.objects.filter(cart__user__telegram_id=user.id, product_id=product_id).select_related('product').first()
        )()

        if not cart_item:
            await query.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤–∞—à–µ–π –∫–æ—Ä–∑–∏–Ω–µ.")
            return

        product_name = await sync_to_async(lambda: cart_item.product.name)()  # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º

        await sync_to_async(cart_item.delete)()
        await query.answer(f"‚úÖ –¢–æ–≤–∞—Ä '{product_name}' —É–¥–∞–ª—ë–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã.")

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ—Ä–∑–∏–Ω—É
        await customer_view_cart(update, context)

    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: {e}")
        await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞.")

# ======= –í—ã–≤–æ–¥ –∑–∞–∫–∞–∑–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è =======
async def customer_view_checkout(update: Update, context: CallbackContext):
    """
    –§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ –∑–∞–∫–∞–∑–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è:
    - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    - –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    - –ö–Ω–æ–ø–∫–∏ "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "–û—Ç–º–µ–Ω–∏—Ç—å", "–í—ã—Ö–æ–¥"
    """
    query = update.callback_query
    user = update.effective_user

    try:
        await query.answer()

        # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è –¢–û–ß–ù–û –ö–ê–ö –í `customer_view_cart`
        is_working_time = await sync_to_async(is_working_hours)()
        if not is_working_time:
            await query.message.reply_text("‚è≥ –°–µ–π—á–∞—Å –Ω–µ—Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è. –ó–∞–∫–∞–∑—ã –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Å 09:00 –¥–æ 18:00.")
            return

        # ‚úÖ –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db_user = await sync_to_async(lambda: CustomUser.objects.get(telegram_id=user.id))()

        # ‚úÖ –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É (—á–µ—Ä–µ–∑ `sync_to_async`)
        cart_items = await sync_to_async(lambda: list(
            CartItem.objects.filter(cart__user=db_user).select_related('product').all()
        ))()

        if not cart_items:
            await query.message.reply_text("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
            return

        # ‚úÖ –°—á–∏—Ç–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—É–º–º—É
        total_price = sum(item.price * item.quantity for item in cart_items)

        # ‚úÖ –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
        items_text = "\n".join(
            [f"üì¶ {item.product.name} - {item.quantity} —à—Ç." for item in cart_items]
        )

        # ‚úÖ –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        message_text = (
            f"üìù –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞:\n\n"
            f"üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {db_user.username}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {db_user.phone_number}\n"
            f"üìç –ê–¥—Ä–µ—Å: {db_user.address}\n\n"
            f"{items_text}\n"
            f"üí∞ –ò—Ç–æ–≥–æ: {total_price} ‚ÇΩ"
        )

        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ó–∞–∫–∞–∑", callback_data="confirm_order")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ó–∞–∫–∞–∑", callback_data="cancel_order")],

        ])

        await query.message.reply_text(message_text, reply_markup=keyboard)

    except Exception as e:
        await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.")
        print(f"–û—à–∏–±–∫–∞: {e}")

# ======= –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã =======
async def customer_confirm_checkout(update: Update, context: CallbackContext):
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –∏ –æ—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.
    """
    query = update.callback_query
    user = query.from_user

    try:
        await query.answer()

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db_user = await sync_to_async(CustomUser.objects.get)(telegram_id=user.id)

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cart = await sync_to_async(lambda: Cart.objects.get(user=db_user))()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ
        cart_items = await sync_to_async(lambda: list(cart.items.all()))()

        if not cart_items:
            await query.message.reply_text("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
            return

        # –°–æ–∑–¥–∞—ë–º –∑–∞–∫–∞–∑
        order = await sync_to_async(Order.objects.create)(
            user=db_user,
            total_price=sum(item.price for item in cart_items),
            address=db_user.address  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∞–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        )

        # –ü–µ—Ä–µ–Ω–æ—Å–∏–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –≤ –∑–∞–∫–∞–∑
        for item in cart_items:
            product = await sync_to_async(lambda: item.product)()  # –û–±–µ—Ä–Ω—É–ª–∏ product –≤ sync_to_async
            await sync_to_async(OrderItem.objects.create)(
                order=order,
                product=product,
                quantity=item.quantity,
                price=item.price
            )

        # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await sync_to_async(lambda: cart.items.all().delete())()

        # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É —Å–æ–æ–±—â–µ–Ω–∏—è
        await query.edit_message_reply_markup(reply_markup=None)


        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º –∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º
        # await notify_admin(order)
        # await notify_staff(order)


        # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞
        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} ({user.id}) –æ—Ñ–æ—Ä–º–∏–ª –∑–∞–∫–∞–∑ #{order.id}.")
        await query.message.reply_text(f"\U0001F4E6 –í–∞—à –∑–∞–∫–∞–∑ #{order.id} —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!")

    except Cart.DoesNotExist:
        logger.error(f"‚ùå –ö–æ—Ä–∑–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username} ({user.id}) –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await query.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞: –∫–æ—Ä–∑–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    except Exception as e:
        logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: {e}")
        await query.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.")


# ======= –û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞ =======
async def customer_cancel_order(update: Update, context: CallbackContext):
    """
    –û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
    """
    query = update.callback_query
    user = query.from_user

    try:
        await query.answer()

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db_user = await sync_to_async(CustomUser.objects.get)(telegram_id=user.id)

        # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å—Ç–∞—Ç—É—Å–µ "created"
        order = await sync_to_async(lambda: Order.objects.filter(user=db_user, status="created").last())()

        if not order:
            await query.message.reply_text("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å.")
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –Ω–∞ "canceled"
        order.status = "canceled"
        await sync_to_async(order.save)()

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await query.edit_message_reply_markup(reply_markup=None)
        await query.message.reply_text(f"‚ùå –í–∞—à –∑–∞–∫–∞–∑ #{order.id} –±—ã–ª –æ—Ç–º–µ–Ω—ë–Ω.")

        # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–º–µ–Ω—É
        logger.info(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} ({user.id}) –æ—Ç–º–µ–Ω–∏–ª –∑–∞–∫–∞–∑ #{order.id}.")

    except CustomUser.DoesNotExist:
        logger.error(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} ({user.id}) –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î.")
        await query.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞: {e}")
        await query.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞.")





# ======= –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–∫–∞–∑–æ–≤ =======
async def customer_view_orders(update: Update, context: CallbackContext):
    """
    –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞.
    """
    user = update.effective_user

    try:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} ({user.id}) –æ—Ç–∫—Ä—ã–ª —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤.")

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        orders = await sync_to_async(lambda: list(Order.objects.filter(user__telegram_id=user.id)))()
        if not orders:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–∫–∞–∑–∞–º–∏
        for order in orders:
            order_text = f"\n<b>üì¶ –ó–∞–∫–∞–∑ ‚Ññ{order.id}</b>\n"
            order_text += f"üóì –î–∞—Ç–∞: {order.created_at.strftime('%d.%m.%Y %H:%M')}\n"
            order_text += f"üí∞ –°—É–º–º–∞: {order.total_price:.2f} ‚ÇΩ\n"
            order_text += f"üìå –°—Ç–∞—Ç—É—Å: <b>{order.get_status_display()}</b>\n"
            order_text += f"üìú –¢–æ–≤–∞—Ä—ã:\n"

            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ
            items = await sync_to_async(lambda: list(order.items.all()))()
            for item in items:
                product_name = await sync_to_async(lambda: item.product.name)()
                order_text += f"  ‚ûú {shorten(product_name, width=30, placeholder='...')} ‚Äî {item.quantity} —à—Ç. ({item.price:.2f} ‚ÇΩ)\n"

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–∫–∞–∑"
            keyboard = [[InlineKeyboardButton("üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f"repeat_order_{order.id}")]]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await update.message.reply_text(order_text, parse_mode="HTML", reply_markup=reply_markup)

    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username} ({user.id}): {e}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤.")


async def customer_repeat_order(update: Update, context: CallbackContext):
    """
    –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞: –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –∑–∞–∫–∞–∑–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    query = update.callback_query
    user = query.from_user

    try:
        await query.answer()
        order_id = int(query.data.split('_')[-1])

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db_user = await sync_to_async(CustomUser.objects.get)(telegram_id=user.id)

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑
        order = await sync_to_async(Order.objects.get)(id=order_id, user=db_user)

        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cart, _ = await sync_to_async(Cart.objects.get_or_create)(user=db_user)

        # –ü–µ—Ä–µ–Ω–æ—Å–∏–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –∑–∞–∫–∞–∑–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É
        order_items = await sync_to_async(lambda: list(order.items.all()))()
        for item in order_items:
            product = await sync_to_async(lambda: item.product)()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ–≤–∞—Ä —É–∂–µ –≤ –∫–æ—Ä–∑–∏–Ω–µ
            cart_item, created = await sync_to_async(CartItem.objects.get_or_create)(
                cart=cart, product=product,
                defaults={"quantity": item.quantity, "price": item.price}
            )

            if not created:
                cart_item.quantity += item.quantity
                cart_item.price = cart_item.quantity * product.price
                await sync_to_async(cart_item.save)()

        await query.message.reply_text(f"‚úÖ –í—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∑–∞–∫–∞–∑–∞ #{order_id} –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∫–æ—Ä–∑–∏–Ω—É!")

    except Order.DoesNotExist:
        await query.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except CustomUser.DoesNotExist:
        await query.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ #{order_id}: {e}")
        await query.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.")



#
# # ======= –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–∫–∞–∑–æ–≤ =======
# async def customer_view_orders(update: Update, context: CallbackContext):
#     """
#     –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã.
#     """
#     user = update.effective_user
#
#     try:
#         logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} ({user.id}) –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /view_orders")
#
#         # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#         orders = await sync_to_async(lambda: list(Order.objects.filter(user__telegram_id=user.id)))()
#         if not orders:
#             await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.")
#             return
#
#         # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –∑–∞–∫–∞–∑–∞–º–∏
#         table_text = ""
#         for order in orders:
#             table_text += f"\n<b>–ó–∞–∫–∞–∑ ‚Ññ{order.id}</b>\n"
#             table_text += f"{'–¢–æ–≤–∞—Ä':<20} {'–ö–æ–ª-–≤–æ':<10} {'–¶–µ–Ω–∞':<10} {'–°—Ç–∞—Ç—É—Å':<15}\n"
#             items = await sync_to_async(lambda: list(order.items.all()))()
#             for item in items:
#                 product_name = await sync_to_async(lambda: item.product.name)()
#                 table_text += f"{product_name:<20} {item.quantity:<10} {item.price:<10.2f} {order.status:<15}\n"
#
#         # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
#         chunks = [table_text[i:i + 4000] for i in range(0, len(table_text), 4000)]
#         for chunk in chunks:
#             await update.message.reply_text(f"<pre>{chunk}</pre>", parse_mode="HTML")
#
#     except Exception as e:
#         logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username} ({user.id}): {e}")
#         await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤.")





# ==========================================

# ======= –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ–∫—É—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤ =======
# async def handle_staff_my_orders(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
#     """
#     –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (–∫–æ—Ç–æ—Ä—ã–µ –æ–Ω –≤—ã–ø–æ–ª–Ω—è–µ—Ç).
#     """
#     telegram_id = update.effective_user.id
#     try:
#         # ‚úÖ –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
#         user = await sync_to_async(CustomUser.objects.get)(telegram_id=telegram_id, is_staff=True)
#         logger.info(f"[STAFF] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ —Å–≤–æ–∏—Ö –∑–∞–∫–∞–∑–æ–≤ –≤ —Ä–∞–±–æ—Ç–µ.")
#
#         # ‚úÖ –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–∫–∞–∑—ã, –≥–¥–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ - –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å
#         orders = await sync_to_async(lambda: list(Order.objects.filter(status="processing", executor_id=user.id)))()
#
#         if not orders:
#             logger.warning(f"‚ùå –£ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {telegram_id} –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.")
#             await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –≤ —Ä–∞–±–æ—Ç–µ.")
#             return ConversationHandler.END
#
#         # ‚úÖ –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏ "‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ"
#         for order in orders:
#             translated_status = STATUS_TRANSLATION.get(order.status, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å")
#             message = (
#                 f"üì¶ <b>–ó–∞–∫–∞–∑ #{order.id}</b>\n"
#                 f"üí∞ –°—É–º–º–∞: {order.total_price:.2f} ‚ÇΩ\n"
#                 f"üìç –ê–¥—Ä–µ—Å: {order.address or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
#                 f"üìå –°—Ç–∞—Ç—É—Å: <b>{translated_status}</b>\n\n"
#             )
#
#             # ‚úÖ –ö–Ω–æ–ø–∫–∞ "‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ" (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π callback_data)
#             keyboard = [[InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"staff_order_details:{order.id}")]]
#             reply_markup = InlineKeyboardMarkup(keyboard)
#
#             await update.message.reply_text(message, parse_mode="HTML", reply_markup=reply_markup)
#
#         logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ –∏–∑ {len(orders)} –∑–∞–∫–∞–∑–æ–≤ –≤ —Ä–∞–±–æ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}.")
#         return ConversationHandler.END
#
#     except CustomUser.DoesNotExist:
#         logger.error(f"‚ùå –û—à–∏–±–∫–∞: —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å Telegram ID {telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
#         await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
#         return ConversationHandler.END
#
#     except Exception as e:
#         logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_staff_my_orders: {e}", exc_info=True)
#         await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
#         return ConversationHandler.END
#
#
# # ======= –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ =======
#
# # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
# def resize_image(image_path, max_size=(512, 512)):
#     try:
#         with Image.open(image_path) as img:
#             img.thumbnail(max_size)  # –£–º–µ–Ω—å—à–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
#             new_path = f"{image_path}_resized.jpg"
#             img.save(new_path, "JPEG")
#             return new_path
#     except Exception as e:
#         logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {image_path}: {e}")
#         return image_path
#
# import os
# from django.conf import settings
#
# async def handle_staff_order_details(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
#     query = update.callback_query
#     await query.answer()
#
#     telegram_id = update.effective_user.id
#     callback_data = query.data
#
#     parts = callback_data.split(":")
#     if len(parts) != 2 or parts[0] != "staff_order_details":
#         logger.warning(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π callback_data: {callback_data}")
#         return
#
#     order_id = int(parts[1])
#
#     try:
#         user = await sync_to_async(CustomUser.objects.get)(telegram_id=telegram_id, is_staff=True)
#         order = await sync_to_async(Order.objects.select_related("user").get)(
#             id=order_id, executor_id=user.id, status="processing"
#         )
#         order_items = await sync_to_async(lambda: list(order.items.select_related("product").all()))()
#
#         details = (
#             f"üì¶ <b>–ó–∞–∫–∞–∑ #{order.id}</b>\n"
#             f"üë§ <b>–ó–∞–∫–∞–∑—á–∏–∫:</b> {order.user.first_name} {order.user.last_name}\n"
#             f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {order.user.phone_number}\n"
#             f"üí∞ <b>–°—É–º–º–∞:</b> {order.total_price:.2f} ‚ÇΩ\n"
#             f"üìç <b>–ê–¥—Ä–µ—Å:</b> {order.address or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
#             f"üìå <b>–°—Ç–∞—Ç—É—Å:</b> –í –ø—Ä–æ—Ü–µ—Å—Å–µ\n\n"
#             f"üõç <b>–¢–æ–≤–∞—Ä—ã:</b>\n"
#         )
#
#         has_images = False
#
#         for item in order_items:
#             details += f"üîπ {item.product.name} ‚Äî {item.quantity} —à—Ç. –ø–æ {item.price:.2f} ‚ÇΩ\n"
#             if item.product.image:
#                 has_images = True
#
#         await query.edit_message_text(details, parse_mode="HTML")
#
#         if has_images:
#             for item in order_items:
#                 if item.product.image:
#                     image_relative_path = str(item.product.image)
#                     image_absolute_path = os.path.join(settings.MEDIA_ROOT, image_relative_path)
#
#                     if not os.path.exists(image_absolute_path):
#                         logger.warning(f"‚ùå –§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_absolute_path}")
#                         continue
#
#                     try:
#                         resized_image_path = resize_image(image_absolute_path)
#
#                         with open(resized_image_path, "rb") as photo:
#                             caption_text = f"üå∏ {item.product.name} ‚Äî {item.quantity} —à—Ç. –ø–æ {item.price:.2f} ‚ÇΩ"
#                             await context.bot.send_photo(
#                                 chat_id=telegram_id,
#                                 photo=photo,
#                                 caption=caption_text,
#                                 parse_mode="HTML"
#                             )
#                             logger.info(f"‚úÖ –§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {resized_image_path}")
#
#                         if resized_image_path != image_absolute_path:
#                             os.remove(resized_image_path)
#
#                     except Exception as e:
#                         logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ {image_absolute_path}: {e}")
#
#     except Order.DoesNotExist:
#         await query.edit_message_text("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –∑–∞–∫—Ä—ã—Ç.")
#     except Exception as e:
#         logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_staff_order_details: {e}")
#         await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
