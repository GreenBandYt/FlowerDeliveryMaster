# bot/handlers/customer.py

import os
from PIL import Image
from telegram.constants import ParseMode  # –î–ª—è HTML-—Ä–∞–∑–º–µ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext, ContextTypes
from asgiref.sync import sync_to_async
from prettytable import PrettyTable
from catalog.models import Product, Cart, CartItem, Order, OrderItem
import logging
from users.models import CustomUser
from bot.keyboards.customer_keyboards import customer_keyboard
# from bot.handlers.customer import view_orders, view_cart, view_catalog, help

from bot.handlers.admin import analytics, manage_users, orders

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)


async def customer_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–ª–∏–µ–Ω—Ç–∞.
    """
    user = await sync_to_async(CustomUser.objects.get)(telegram_id=update.effective_user.id)
    await update.message.reply_text(
        f"üå∏ –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.username} (–ö–ª–∏–µ–Ω—Ç)!\n"
        "üéâ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "üì¶ /view_orders - –ú–æ–∏ –∑–∞–∫–∞–∑—ã\n"
        "üõí /view_cart - –ö–æ—Ä–∑–∏–Ω–∞\n"
        "üõçÔ∏è /view_catalog - –ö–∞—Ç–∞–ª–æ–≥\n"
        "‚ÑπÔ∏è /show_help - –ü–æ–º–æ—â—å –ø–æ–∫–∞–∑–∞—Ç—å",
        reply_markup=customer_keyboard
    )

async def show_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("Command /show_help invoked by user ID: %s", update.effective_user.id)
    await update.message.reply_text(
        "üå∏ –ö–ª–∏–µ–Ω—Ç—Å–∫–∞—è –ø–æ–º–æ—â—å:\n"
        "üì¶ /view_orders - –ú–æ–∏ –∑–∞–∫–∞–∑—ã\n"
        "üõí /view_cart - –ö–æ—Ä–∑–∏–Ω–∞\n"
        "üõçÔ∏è /view_catalog - –ö–∞—Ç–∞–ª–æ–≥\n"
        "‚ÑπÔ∏è /show_help - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å"
    )


# ======= –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤ =======
async def view_catalog(update: Update, context: CallbackContext):
    """
    –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É.
    """
    user = update.effective_user

    try:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} ({user.id}) –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /view_catalog")

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        products = await sync_to_async(lambda: list(Product.objects.all()))()
        if not products:
            await update.message.reply_text("–ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç.")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –∏ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏
        for product in products:
            text = (f"–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: {product.id}\n"
                    f"\U0001F4E6 {product.name}\n"
                    f"\U0001F4B0 –¶–µ–Ω–∞: {product.price:.2f} —Ä—É–±.\n"
                    f"\u2139\ufe0f {product.description}")

            # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            image_path = os.path.join("media", str(product.image))

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            if os.path.exists(image_path):
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                resized_image_path = resize_image(image_path)

                # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É
                keyboard = [[InlineKeyboardButton(
                    "–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É",
                    callback_data=f"add_to_cart_{product.id}"
                )]]
                reply_markup = InlineKeyboardMarkup(keyboard)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ, —Ç–µ–∫—Å—Ç –∏ –∫–Ω–æ–ø–∫—É
                await context.bot.send_photo(
                    chat_id=update.message.chat_id,
                    photo=open(resized_image_path, "rb"),
                    caption=text,
                    parse_mode=ParseMode.HTML,
                    reply_markup=reply_markup
                )

                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —É–º–µ–Ω—å—à–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                if resized_image_path != image_path:
                    os.remove(resized_image_path)
            else:
                logger.warning(f"–§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {image_path} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                await update.message.reply_text(f"{text}\n\n–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.")

    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username} ({user.id}): {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–∞–ª–æ–≥–∞.")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
def resize_image(image_path, max_size=(512, 512)):
    try:
        with Image.open(image_path) as img:
            img.thumbnail(max_size)  # –£–º–µ–Ω—å—à–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
            new_path = f"{image_path}_resized.jpg"
            img.save(new_path, "JPEG")
            return new_path
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {image_path}: {e}")
        return image_path

# ======= –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É =======
async def add_to_cart(update: Update, context: CallbackContext):
    """
    –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ callback-–∑–∞–ø—Ä–æ—Å—É.
    """
    query = update.callback_query
    user = query.from_user

    try:
        await query.answer()
        product_id = int(query.data.split('_')[-1])

        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        product = await sync_to_async(Product.objects.get)(id=product_id)

        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cart, _ = await sync_to_async(Cart.objects.get_or_create)(user__telegram_id=user.id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ–≤–∞—Ä —É–∂–µ –≤ –∫–æ—Ä–∑–∏–Ω–µ
        cart_item, created = await sync_to_async(CartItem.objects.get_or_create)(
            cart=cart, product=product,
            defaults={"quantity": 1, "price": product.price}
        )
        if not created:
            cart_item.quantity += 1
            cart_item.price = cart_item.quantity * product.price
            await sync_to_async(cart_item.save)()

        logger.info(f"–¢–æ–≤–∞—Ä {product.name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username} ({user.id}).")
        await query.edit_message_reply_markup(reply_markup=None)
        await query.message.reply_text(f"\U0001F4E6 –¢–æ–≤–∞—Ä '{product.name}' –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à—É –∫–æ—Ä–∑–∏–Ω—É!")

    except Product.DoesNotExist:
        logger.error(f"–¢–æ–≤–∞—Ä —Å ID {product_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await query.message.reply_text("–û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É: {e}")
        await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É.")

async def decrease_quantity(update: Update, context: CallbackContext):
    """
    –£–º–µ–Ω—å—à–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ.
    """
    query = update.callback_query
    user = update.effective_user

    try:
        product_id = int(query.data.split("_")[1])
        cart_item = await sync_to_async(
            lambda: CartItem.objects.filter(cart__user__telegram_id=user.id, product_id=product_id).first()
        )()

        if not cart_item:
            await query.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤–∞—à–µ–π –∫–æ—Ä–∑–∏–Ω–µ.")
            return

        if cart_item.quantity > 1:
            cart_item.quantity -= 1
            cart_item.price = cart_item.quantity * await sync_to_async(lambda: cart_item.product.price)()
            await sync_to_async(cart_item.save)()
            await query.answer(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ —É–º–µ–Ω—å—à–µ–Ω–æ –¥–æ {cart_item.quantity}.")
        else:
            await query.answer("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–º–µ–Ω—å—à–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∏–∂–µ 1.")

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ—Ä–∑–∏–Ω—É
        await view_cart(update, context)

    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–º–µ–Ω—å—à–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞: {e}")
        await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞.")



# –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞
async def increase_quantity(update: Update, context: CallbackContext):
    query = update.callback_query
    user = query.from_user
    product_id = int(query.data.split('_')[-1])

    try:
        await query.answer()

        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ
        cart_item = await sync_to_async(CartItem.objects.select_related('product').get)(
            cart__user__telegram_id=user.id, product_id=product_id
        )

        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        cart_item.quantity += 1
        cart_item.price = cart_item.quantity * await sync_to_async(lambda: cart_item.product.price)()
        await sync_to_async(cart_item.save)()

        await query.message.reply_text(
            f"üîº –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ '{cart_item.product.name}' —É–≤–µ–ª–∏—á–µ–Ω–æ –¥–æ {cart_item.quantity}."
        )
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ—Ä–∑–∏–Ω—É
        await view_cart(update, context)


    except CartItem.DoesNotExist:
        await query.message.reply_text("‚ö†Ô∏è –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤–∞—à–µ–π –∫–æ—Ä–∑–∏–Ω–µ.")
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ {product_id}: {e}")
        await query.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞.")


async def delete_item(update: Update, context: CallbackContext):
    """
    –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã.
    """
    query = update.callback_query
    user = update.effective_user

    try:
        product_id = int(query.data.split("_")[1])
        cart_item = await sync_to_async(
            lambda: CartItem.objects.filter(cart__user__telegram_id=user.id, product_id=product_id).first()
        )()

        if not cart_item:
            await query.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤–∞—à–µ–π –∫–æ—Ä–∑–∏–Ω–µ.")
            return

        product_name = await sync_to_async(lambda: cart_item.product.name)()
        await sync_to_async(cart_item.delete)()
        await query.answer(f"–¢–æ–≤–∞—Ä '{product_name}' —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã.")

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ—Ä–∑–∏–Ω—É
        await view_cart(update, context)

    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: {e}")
        await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞.")




async def remove_from_cart(update: Update, context: CallbackContext):
    """
    –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ callback-–∑–∞–ø—Ä–æ—Å—É.
    """
    query = update.callback_query
    user = query.from_user

    try:
        await query.answer()
        product_id = int(query.data.split('_')[-1])

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cart = await sync_to_async(Cart.objects.get)(user__telegram_id=user.id)

        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ
        cart_item = await sync_to_async(CartItem.objects.get)(cart=cart, product_id=product_id)

        # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É–¥–∞–ª—è–µ–º –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
        if cart_item.quantity > 1:
            cart_item.quantity -= 1
            cart_item.price = cart_item.quantity * cart_item.product.price
            await sync_to_async(cart_item.save)()
        else:
            await sync_to_async(cart_item.delete)()

        logger.info(f"–¢–æ–≤–∞—Ä —Å ID {product_id} —É–¥–∞–ª—ë–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username} ({user.id}).")
        await query.edit_message_reply_markup(reply_markup=None)
        await query.message.reply_text("\U0001F6AE –¢–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω –∏–∑ –≤–∞—à–µ–π –∫–æ—Ä–∑–∏–Ω—ã.")

    except Cart.DoesNotExist:
        logger.error(f"–ö–æ—Ä–∑–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username} ({user.id}) –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await query.message.reply_text("–û—à–∏–±–∫–∞: –∫–æ—Ä–∑–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    except CartItem.DoesNotExist:
        logger.error(f"–¢–æ–≤–∞—Ä —Å ID {product_id} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∫–æ—Ä–∑–∏–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username} ({user.id}).")
        await query.message.reply_text("–û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤–∞—à–µ–π –∫–æ—Ä–∑–∏–Ω–µ.")
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã: {e}")
        await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã.")


async def confirm_checkout(update: Update, context: CallbackContext):
    """
    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã.
    """
    query = update.callback_query
    user = query.from_user

    try:
        await query.answer()

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cart = await sync_to_async(Cart.objects.get)(user__telegram_id=user.id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ
        if not cart.items.exists():
            await query.message.reply_text("\U0001F6D2 –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
            return

        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ—Ä–∑–∏–Ω—ã
        order = await sync_to_async(Order.objects.create)(
            user=cart.user,
            total_price=sum(item.price for item in cart.items.all())
        )
        for item in cart.items.all():
            await sync_to_async(order.items.create)(
                product=item.product,
                quantity=item.quantity,
                price=item.price
            )
        await sync_to_async(cart.items.all().delete)()  # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É

        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} ({user.id}) –æ—Ñ–æ—Ä–º–∏–ª –∑–∞–∫–∞–∑ {order.id}.")
        await query.edit_message_reply_markup(reply_markup=None)
        await query.message.reply_text("\U0001F4E6 –í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!")

    except Cart.DoesNotExist:
        logger.error(f"–ö–æ—Ä–∑–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username} ({user.id}) –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await query.message.reply_text("–û—à–∏–±–∫–∞: –∫–æ—Ä–∑–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: {e}")
        await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.")

async def cancel_checkout(update: Update, context: CallbackContext):
    """
    –û—Ç–º–µ–Ω–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.
    """
    query = update.callback_query
    user = query.from_user

    try:
        await query.answer()

        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} ({user.id}) –æ—Ç–º–µ–Ω–∏–ª –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞.")
        await query.edit_message_reply_markup(reply_markup=None)
        await query.message.reply_text("\U0001F6AB –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏.")

    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: {e}")
        await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.")


# ======= –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ—Ä–∑–∏–Ω—ã =======
async def view_cart(update: Update, context: CallbackContext):
    """
    –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
    """
    user = update.effective_user
    message = update.callback_query.message if update.callback_query else update.message

    try:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} ({user.id}) –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /view_cart")

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cart_items = await sync_to_async(
            lambda: list(CartItem.objects.filter(cart__user__telegram_id=user.id).select_related('product'))
        )()

        if not cart_items:
            await message.reply_text("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º –∫–æ—Ä–∑–∏–Ω—ã
        total_price = 0
        text = "üõí <b>–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:</b>\n\n"
        keyboard = []

        for item in cart_items:
            product_name = item.product.name
            total_price += item.price
            text += (
                f"üì¶ {product_name}\n"
                f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item.quantity}\n"
                f"–¶–µ–Ω–∞: {item.price} ‚ÇΩ\n\n"
            )

            # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–º
            keyboard.append([
                InlineKeyboardButton("‚ûñ", callback_data=f"decrease_{item.product.id}"),
                InlineKeyboardButton("‚ûï", callback_data=f"increase_{item.product.id}"),
                InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{item.product.id}")
            ])

        text += f"üí∞ <b>–ò—Ç–æ–≥–æ: {total_price} ‚ÇΩ</b>"

        # –ö–Ω–æ–ø–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
        keyboard.append([InlineKeyboardButton("üìù –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="checkout")])
        reply_markup = InlineKeyboardMarkup(keyboard)

        await message.reply_text(text, reply_markup=reply_markup, parse_mode="HTML")

    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∫–æ—Ä–∑–∏–Ω—ã: {e}")
        await message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ—Ä–∑–∏–Ω—ã.")


# ======= –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ =======
async def checkout(update: Update, context: CallbackContext):
    """
    –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    query = update.callback_query
    user = query.from_user

    try:
        await query.answer()

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cart = await sync_to_async(Cart.objects.get)(user__telegram_id=user.id)
        cart_items = await sync_to_async(lambda: list(cart.items.all()))()

        if not cart_items:
            await query.message.reply_text("\U0001F6D2 –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑.")
            return

        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è sync_to_async)
        def create_order():
            # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞
            total_price = sum(item.product.price * item.quantity for item in cart_items)

            # –°–æ–∑–¥–∞—ë–º –∑–∞–∫–∞–∑ —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç—å—é
            order = Order.objects.create(
                user=cart.user,
                status="–ù–æ–≤—ã–π",
                total_price=total_price  # –£–∫–∞–∑—ã–≤–∞–µ–º –≤—ã—á–∏—Å–ª–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            )

            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞
            for item in cart_items:
                OrderItem.objects.create(
                    order=order,
                    product=item.product,
                    quantity=item.quantity,
                    price=item.price
                )

            return order

        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        order = await sync_to_async(create_order)()

        # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
        await sync_to_async(cart.items.all().delete)()

        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} ({user.id}) –æ—Ñ–æ—Ä–º–∏–ª –∑–∞–∫–∞–∑ #{order.id}.")
        await query.message.reply_text(f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ #{order.id} —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!")

    except Cart.DoesNotExist:
        await query.message.reply_text("\U0001F6D2 –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑.")
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {e}")
        await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.")

# ======= –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–∫–∞–∑–æ–≤ =======
async def view_orders(update: Update, context: CallbackContext):
    """
    –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã.
    """
    user = update.effective_user

    try:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} ({user.id}) –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /view_orders")

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        orders = await sync_to_async(lambda: list(Order.objects.filter(user__telegram_id=user.id)))()
        if not orders:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –∑–∞–∫–∞–∑–∞–º–∏
        table_text = ""
        for order in orders:
            table_text += f"\n<b>–ó–∞–∫–∞–∑ ‚Ññ{order.id}</b>\n"
            table_text += f"{'–¢–æ–≤–∞—Ä':<20} {'–ö–æ–ª-–≤–æ':<10} {'–¶–µ–Ω–∞':<10} {'–°—Ç–∞—Ç—É—Å':<15}\n"
            items = await sync_to_async(lambda: list(order.items.all()))()
            for item in items:
                product_name = await sync_to_async(lambda: item.product.name)()
                table_text += f"{product_name:<20} {item.quantity:<10} {item.price:<10.2f} {order.status:<15}\n"

        # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
        chunks = [table_text[i:i + 4000] for i in range(0, len(table_text), 4000)]
        for chunk in chunks:
            await update.message.reply_text(f"<pre>{chunk}</pre>", parse_mode="HTML")

    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username} ({user.id}): {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤.")


async def handle_customer_menu(update: Update, context: CallbackContext):

    text = update.message.text

    if text == "üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã":
        await view_orders(update, context)
    elif text == "üõí –ö–æ—Ä–∑–∏–Ω–∞":
        await view_cart(update, context)
    elif text == "üõçÔ∏è –ö–∞—Ç–∞–ª–æ–≥":
        await view_catalog(update, context)
    elif text == "‚ÑπÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å":
        await show_help(update, context)
    else:
        await update.message.reply_text(
            "‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ 333 –ø—É–Ω–∫—Ç –º–µ–Ω—é.",
            reply_markup=customer_keyboard
        )




