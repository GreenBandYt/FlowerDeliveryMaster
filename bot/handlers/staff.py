import os
from PIL import Image
from telegram.constants import ParseMode  # –î–ª—è HTML-—Ä–∞–∑–º–µ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
from telegram.ext import ContextTypes, CommandHandler, MessageHandler, CallbackQueryHandler, ConversationHandler, filters
from asgiref.sync import sync_to_async
from prettytable import PrettyTable
from users.models import CustomUser
from catalog.models import Order, OrderItem
from bot.keyboards.staff_keyboards import staff_keyboard
import logging
import asyncio
from telegram.ext import Application

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
AWAIT_ORDER_ID = 1
AWAIT_NEW_STATUS = 2

async def staff_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.
    """
    user = await sync_to_async(CustomUser.objects.get)(telegram_id=update.effective_user.id)
    await update.message.reply_text(
        f"üõ†Ô∏è –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.username} (–°–æ—Ç—Ä—É–¥–Ω–∏–∫)!\n"
        "üîß –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "üì¶ /my_orders - –¢–µ–∫—É—â–∏–µ –∑–∞–∫–∞–∑—ã\n"
        "üîÑ /update_status - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–æ–≤\n"
        "‚ÑπÔ∏è /look_help - –ü–æ–º–æ—â—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å",
        reply_markup=staff_keyboard
    )

async def look_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /look_help –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.
    """
    await update.message.reply_text(
        "üõ†Ô∏è –ü–æ–º–æ—â—å –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:\n"
        "üì¶ /my_orders - –¢–µ–∫—É—â–∏–µ –∑–∞–∫–∞–∑—ã\n"
        "üîÑ /update_status - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–æ–≤\n"
        "‚ÑπÔ∏è /look_help - –ü–æ–º–æ—â—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å"
    )


# ======= –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è =======
async def async_send_new_order_notification(order):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º.
    """
    try:
        staff_users = await sync_to_async(
            lambda: list(CustomUser.objects.filter(is_staff=True, telegram_id__isnull=False))
        )()

        order_items = await sync_to_async(lambda: list(order.items.prefetch_related("product").all()))()
        phone_number = order.user.phone_number if order.user.phone_number else "–ù–µ —É–∫–∞–∑–∞–Ω"

        order_message = (
            f"üì¶ **–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order.id}**\n"
            f"üå∏ –°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:\n"
            + "\n".join(
                [f"- {item.product.name}: {item.quantity} —à—Ç. –ø–æ {item.price:.2f} —Ä—É–±." for item in order_items]
            )
            + f"\nüí∞ –û–±—â–∞—è —Å—É–º–º–∞: {order.total_price:.2f} —Ä—É–±.\n"
            f"üìç –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {order.address or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞: {phone_number}"
        )

        keyboard = [[InlineKeyboardButton("–í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É", callback_data=f"take_order_{order.id}")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        token = os.getenv('TELEGRAM_BOT_TOKEN')
        if not token:
            raise ValueError("–¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env.")

        app = Application.builder().token(token).build()
        await app.initialize()

        for staff in staff_users:
            await app.bot.send_message(
                chat_id=staff.telegram_id,
                text=order_message,
                parse_mode="Markdown",
                reply_markup=reply_markup
            )

        await app.shutdown()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}", exc_info=True)


def send_new_order_notification(order):
    """
    –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–∞–∫–∞–∑–∞—Ö.
    """
    asyncio.run(async_send_new_order_notification(order))


# ======= –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–∫–∞–∑–æ–≤ =======
async def my_orders(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.
    """
    telegram_id = update.effective_user.id
    try:
        user = await sync_to_async(CustomUser.objects.get)(telegram_id=telegram_id, is_staff=True)
        orders = await sync_to_async(lambda: list(Order.objects.filter(status="processing")))()

        if not orders:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –≤ —Ä–∞–±–æ—Ç–µ.")
            return ConversationHandler.END

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–∫–∞–∑–∞–º–∏
        message = "üìã <b>–¢–µ–∫—É—â–∏–µ –∑–∞–∫–∞–∑—ã:</b>\n\n"
        for order in orders:
            message += (
                f"üì¶ –ó–∞–∫–∞–∑ #{order.id}\n"
                f"üí∞ –°—É–º–º–∞: {order.total_price:.2f} ‚ÇΩ\n"
                f"üìç –ê–¥—Ä–µ—Å: {order.address or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                f"üìå –°—Ç–∞—Ç—É—Å: {order.status}\n\n"
            )
        await update.message.reply_text(message, parse_mode="HTML")
        return AWAIT_ORDER_ID
    except CustomUser.DoesNotExist:
        logger.error(f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å Telegram ID {telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return ConversationHandler.END


# ======= –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ =======
async def order_details(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞.
    """
    try:
        order_id = int(update.message.text)
        order = await sync_to_async(Order.objects.get)(id=order_id, status="processing")

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–∫–∞–∑–∞
        details = (
            f"üì¶ <b>–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ #{order.id}:</b>\n"
            f"üí∞ –°—É–º–º–∞: {order.total_price} ‚ÇΩ\n"
            f"üìç –ê–¥—Ä–µ—Å: {order.address or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"üìå –°—Ç–∞—Ç—É—Å: {order.status}\n"
        )
        keyboard = [
            [InlineKeyboardButton("‚úÖ –í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É", callback_data=f"take_order_{order.id}")],
            [InlineKeyboardButton("‚úîÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"complete_order_{order.id}")],
            [InlineKeyboardButton("‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è", callback_data=f"cancel_order_{order.id}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(details, parse_mode="HTML", reply_markup=reply_markup)
        return ConversationHandler.END

    except ValueError:
        await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞–∫–∞–∑–∞.")
        return AWAIT_ORDER_ID
    except Order.DoesNotExist:
        await update.message.reply_text("‚ö†Ô∏è –ó–∞–∫–∞–∑ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return AWAIT_ORDER_ID



# ======= –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ =======
async def complete_order_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –ø–æ inline-–∫–Ω–æ–ø–∫–µ.
    """
    query = update.callback_query
    await query.answer()
    callback_data = query.data

    if callback_data.startswith("complete_order_"):
        order_id = callback_data.replace("complete_order_", "")
        try:
            order = await sync_to_async(Order.objects.get)(id=order_id, status="processing")
            order.status = "completed"
            await sync_to_async(order.save)()
            await query.edit_message_text(f"‚úÖ –ó–∞–∫–∞–∑ #{order.id} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω.")
        except Order.DoesNotExist:
            logger.error(f"–ó–∞–∫–∞–∑ —Å ID {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à—ë–Ω.")
            await query.edit_message_text("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à—ë–Ω.")


# ======= –í–∑—è—Ç–∏–µ –∑–∞–∫–∞–∑–∞ –≤ —Ä–∞–±–æ—Ç—É =======
async def take_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É".
    """
    query = update.callback_query
    await query.answer()
    callback_data = query.data

    if callback_data.startswith("take_order_"):
        order_id = int(callback_data.split("_")[2])
        try:
            order = await sync_to_async(Order.objects.get)(id=order_id, status="created")
            order.status = "processing"
            await sync_to_async(order.save)()
            await query.edit_message_text(f"‚úÖ –ó–∞–∫–∞–∑ #{order.id} –≤–∑—è—Ç –≤ —Ä–∞–±–æ—Ç—É.")
        except Order.DoesNotExist:
            await query.edit_message_text("‚ùå –≠—Ç–æ—Ç –∑–∞–∫–∞–∑ –±–æ–ª—å—à–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")

# ======= –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ =======
async def update_order_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ –ø–æ inline-–∫–Ω–æ–ø–∫–µ.
    """
    query = update.callback_query
    await query.answer()
    try:
        _, order_id, new_status = query.data.split("_")
        if new_status not in ["processing", "completed", "canceled"]:
            raise ValueError("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞.")
        order = await sync_to_async(Order.objects.get)(id=order_id)
        order.status = new_status
        await sync_to_async(order.save)()
        await query.edit_message_text(f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ #{order.id} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ '{new_status}'.")
    except ValueError as e:
        await query.edit_message_text(f"–û—à–∏–±–∫–∞: {e}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞: {e}", exc_info=True)
        await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞.")


# ======= –ú–µ–Ω—é –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ =======
async def handle_staff_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã":
        await my_orders(update, context)
    elif text == "üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å":
        await update.message.reply_text("–î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑.")
    elif text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å":
        await update.message.reply_text("–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏.")
    else:
        await update.message.reply_text("‚ùì –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é.", reply_markup=staff_keyboard)
