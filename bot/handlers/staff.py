# bot/handlers/staff.py

import os
from PIL import Image
from telegram.constants import ParseMode  # –î–ª—è HTML-—Ä–∞–∑–º–µ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
from telegram.ext import ContextTypes, CommandHandler, MessageHandler, CallbackQueryHandler, ConversationHandler, filters
from asgiref.sync import sync_to_async
from prettytable import PrettyTable
from users.models import CustomUser
from catalog.models import Order, OrderItem
from bot.keyboards.staff_keyboards import staff_keyboard
import logging
import asyncio
from telegram.ext import Application

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
AWAIT_ORDER_ID = 1
AWAIT_NEW_STATUS = 2

logger = logging.getLogger(__name__)

# ‚úÖ –ü–µ—Ä–µ–≤–æ–¥ —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–∫–∞–∑–æ–≤
STATUS_TRANSLATION = {
    "created": "–ù–æ–≤—ã–π",
    "processing": "–í –ø—Ä–æ—Ü–µ—Å—Å–µ",
    "shipped": "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω",
    "delivered": "–î–æ—Å—Ç–∞–≤–ª–µ–Ω",
    "canceled": "–û—Ç–º–µ–Ω—ë–Ω"
}
# from bot.utils.access_control import check_access  # –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–∏

logger = logging.getLogger(__name__)

async def staff_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º.
    """
    telegram_id = update.effective_user.id
    try:
        user = await sync_to_async(CustomUser.objects.get)(telegram_id=telegram_id)

        logger.info(f"[STAFF] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –≤–æ—à–µ–ª –≤ —Å–∏—Å—Ç–µ–º—É –∫–∞–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫.")

        # ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update.message.reply_text(
            f"üõ†Ô∏è –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.username} (–°–æ—Ç—Ä—É–¥–Ω–∏–∫)!\n"
            "üîß –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "üì¶ –ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã\n"
            "üîÑ –¢–µ–∫—É—â–∏–µ –∑–∞–∫–∞–∑—ã\n"
            "‚ùì –ü–æ–º–æ—â—å",
            reply_markup=staff_keyboard
        )

    except CustomUser.DoesNotExist:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å Telegram ID {telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ staff_start: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# ======= –ü—Ä–æ—Å–º–æ—Ç—Ä –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ =======
async def handle_staff_new_orders(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ (–∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–∏–∫—Ç–æ –Ω–µ –≤–∑—è–ª –≤ —Ä–∞–±–æ—Ç—É).
    """
    telegram_id = update.effective_user.id
    try:
        # ‚úÖ –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        user = await sync_to_async(CustomUser.objects.get)(telegram_id=telegram_id, is_staff=True)
        logger.info(f"[STAFF] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤.")

        # ‚úÖ –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–∫–∞–∑—ã –±–µ–∑ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        orders = await sync_to_async(lambda: list(Order.objects.filter(status="processing", executor_id__isnull=True)))()

        if not orders:
            logger.warning(f"‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}.")
            await update.message.reply_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ.")
            return ConversationHandler.END

        # ‚úÖ –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É"
        for order in orders:
            translated_status = STATUS_TRANSLATION.get(order.status, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å")
            message = (
                f"üì¶ <b>–ó–∞–∫–∞–∑ #{order.id}</b>\n"
                f"üí∞ –°—É–º–º–∞: {order.total_price:.2f} ‚ÇΩ\n"
                f"üìç –ê–¥—Ä–µ—Å: {order.address or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                f"üìå –°—Ç–∞—Ç—É—Å: <b>{translated_status}</b>\n\n"
            )

            # ‚úÖ –ö–Ω–æ–ø–∫–∞ "–í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É" (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π callback_data)
            keyboard = [[InlineKeyboardButton("üõ† –í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É", callback_data=f"staff_take_order:{order.id}")]]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await update.message.reply_text(message, parse_mode="HTML", reply_markup=reply_markup)

        logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ –∏–∑ {len(orders)} –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}.")
        return ConversationHandler.END

    except CustomUser.DoesNotExist:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å Telegram ID {telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return ConversationHandler.END

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_staff_new_orders: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return ConversationHandler.END

# ======= –ë–µ—Ä–µ–º –∑–∞–∫–∞–∑ –≤ —Ä–∞–±–æ—Ç—É =======
async def handle_staff_take_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É –≤–∑—è—Ç—å –∑–∞–∫–∞–∑ –≤ —Ä–∞–±–æ—Ç—É (–Ω–∞–∑–Ω–∞—á–∞–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º).
    """
    query = update.callback_query
    await query.answer()

    telegram_id = update.effective_user.id
    callback_data = query.data  # –ü–æ–ª—É—á–∞–µ–º callback_data

    # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ callback —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É
    parts = callback_data.split(":")
    if len(parts) != 2 or parts[0] != "staff_take_order":
        logger.warning(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π callback_data: {callback_data}")
        return

    order_id = int(parts[1])  # ‚úÖ –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞–∫–∞–∑–∞

    try:
        # ‚úÖ –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        user = await sync_to_async(CustomUser.objects.get)(telegram_id=telegram_id, is_staff=True)

        # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–∫–∞–∑ –∏ –Ω–µ –∑–∞–Ω—è—Ç –ª–∏ –æ–Ω
        order = await sync_to_async(Order.objects.get)(id=order_id)

        if order.executor_id is not None:
            logger.warning(f"‚ùå –ó–∞–∫–∞–∑ #{order_id} —É–∂–µ –≤–∑—è—Ç –≤ —Ä–∞–±–æ—Ç—É –¥—Ä—É–≥–∏–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º.")
            await query.edit_message_text(f"‚ùå –≠—Ç–æ—Ç –∑–∞–∫–∞–∑ —É–∂–µ –≤–∑—è–ª –≤ —Ä–∞–±–æ—Ç—É –¥—Ä—É–≥–æ–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫.")
            return

        # ‚úÖ –ù–∞–∑–Ω–∞—á–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
        order.executor_id = user.id
        order.status = "processing"
        await sync_to_async(order.save)()

        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –≤–∑—è–ª –∑–∞–∫–∞–∑ #{order_id} –≤ —Ä–∞–±–æ—Ç—É.")
        await query.edit_message_text(f"‚úÖ –í—ã –≤–∑—è–ª–∏ –∑–∞–∫–∞–∑ #{order_id} –≤ —Ä–∞–±–æ—Ç—É.")

    except Order.DoesNotExist:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ #{order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    except CustomUser.DoesNotExist:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å Telegram ID {telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_staff_take_order: {e}", exc_info=True)
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# ======= –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ–∫—É—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤ =======
async def handle_staff_my_orders(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (–∫–æ—Ç–æ—Ä—ã–µ –æ–Ω –≤—ã–ø–æ–ª–Ω—è–µ—Ç).
    """
    telegram_id = update.effective_user.id
    try:
        # ‚úÖ –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        user = await sync_to_async(CustomUser.objects.get)(telegram_id=telegram_id, is_staff=True)
        logger.info(f"[STAFF] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ —Å–≤–æ–∏—Ö –∑–∞–∫–∞–∑–æ–≤ –≤ —Ä–∞–±–æ—Ç–µ.")

        # ‚úÖ –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–∫–∞–∑—ã, –≥–¥–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ - –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å
        orders = await sync_to_async(lambda: list(Order.objects.filter(status="processing", executor_id=user.id)))()

        if not orders:
            logger.warning(f"‚ùå –£ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {telegram_id} –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.")
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –≤ —Ä–∞–±–æ—Ç–µ.")
            return ConversationHandler.END

        # ‚úÖ –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏ "‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ"
        for order in orders:
            translated_status = STATUS_TRANSLATION.get(order.status, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å")
            message = (
                f"üì¶ <b>–ó–∞–∫–∞–∑ #{order.id}</b>\n"
                f"üí∞ –°—É–º–º–∞: {order.total_price:.2f} ‚ÇΩ\n"
                f"üìç –ê–¥—Ä–µ—Å: {order.address or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                f"üìå –°—Ç–∞—Ç—É—Å: <b>{translated_status}</b>\n\n"
            )

            # ‚úÖ –ö–Ω–æ–ø–∫–∞ "‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ" (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π callback_data)
            keyboard = [[InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"staff_order_details:{order.id}")]]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await update.message.reply_text(message, parse_mode="HTML", reply_markup=reply_markup)

        logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ –∏–∑ {len(orders)} –∑–∞–∫–∞–∑–æ–≤ –≤ —Ä–∞–±–æ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}.")
        return ConversationHandler.END

    except CustomUser.DoesNotExist:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å Telegram ID {telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return ConversationHandler.END

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_staff_my_orders: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return ConversationHandler.END


# ======= –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ =======
from django.conf import settings  # ‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º MEDIA_ROOT
from PIL import Image
import os

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
def resize_image(image_path, max_size=(512, 512)):
    try:
        with Image.open(image_path) as img:
            img.thumbnail(max_size)  # –£–º–µ–Ω—å—à–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
            new_path = f"{image_path}_resized.jpg"
            img.save(new_path, "JPEG")
            return new_path
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {image_path}: {e}")
        return image_path

async def handle_staff_order_details(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()

    telegram_id = update.effective_user.id
    callback_data = query.data

    parts = callback_data.split(":")
    if len(parts) != 2 or parts[0] != "staff_order_details":
        logger.warning(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π callback_data: {callback_data}")
        return

    order_id = int(parts[1])

    try:
        user = await sync_to_async(CustomUser.objects.get)(telegram_id=telegram_id, is_staff=True)
        order = await sync_to_async(Order.objects.select_related("user").get)(
            id=order_id, executor_id=user.id, status="processing"
        )
        order_items = await sync_to_async(lambda: list(order.items.select_related("product").all()))()

        base_url = "http://127.0.0.1:8000"  # –õ–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä (–∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ)
        details = (
            f"üì¶ <b>–ó–∞–∫–∞–∑ #{order.id}</b>\n"
            f"üë§ <b>–ó–∞–∫–∞–∑—á–∏–∫:</b> {order.user.first_name} {order.user.last_name}\n"
            f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {order.user.phone_number}\n"
            f"üí∞ <b>–°—É–º–º–∞:</b> {order.total_price:.2f} ‚ÇΩ\n"
            f"üìç <b>–ê–¥—Ä–µ—Å:</b> {order.address or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"üìå <b>–°—Ç–∞—Ç—É—Å:</b> –í –ø—Ä–æ—Ü–µ—Å—Å–µ\n\n"
            f"üõç <b>–¢–æ–≤–∞—Ä—ã:</b>\n"
        )

        for item in order_items:
            if item.product.image:
                image_relative_path = str(item.product.image)  # –£–±–∏—Ä–∞–µ–º –¥–≤–æ–π–Ω–æ–µ media/
                image_absolute_path = os.path.join(settings.MEDIA_ROOT, image_relative_path)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
                if not os.path.exists(image_absolute_path):
                    logger.warning(f"‚ùå –§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_absolute_path}")
                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏—Ç–µ—Ä–∞—Ü–∏—é, –µ—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç

                try:
                    resized_image_path = resize_image(image_absolute_path)

                    with open(resized_image_path, "rb") as photo:
                        await context.bot.send_photo(
                            chat_id=telegram_id,
                            photo=photo,
                            caption=f"üå∏ {item.product.name} ‚Äî {item.quantity} —à—Ç. –ø–æ {item.price:.2f} ‚ÇΩ"
                        )
                        logger.info(f"‚úÖ –§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {resized_image_path}")

                    if resized_image_path != image_absolute_path:
                        os.remove(resized_image_path)

                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ {image_absolute_path}: {e}")

    except Order.DoesNotExist:
        await query.edit_message_text("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –∑–∞–∫—Ä—ã—Ç.")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_staff_order_details: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")














async def look_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /look_help –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.
    """
    await update.message.reply_text(
        "üõ†Ô∏è –ü–æ–º–æ—â—å –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:\n"
        "üì¶ /my_orders - –¢–µ–∫—É—â–∏–µ –∑–∞–∫–∞–∑—ã\n"
        "üîÑ /update_status - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–æ–≤\n"
        "‚ÑπÔ∏è /look_help - –ü–æ–º–æ—â—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å"
    )


# ======= –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è =======
async def async_send_new_order_notification(order):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º.
    """
    try:
        staff_users = await sync_to_async(
            lambda: list(CustomUser.objects.filter(is_staff=True, telegram_id__isnull=False))
        )()

        order_items = await sync_to_async(lambda: list(order.items.prefetch_related("product").all()))()
        phone_number = order.user.phone_number if order.user.phone_number else "–ù–µ —É–∫–∞–∑–∞–Ω"

        order_message = (
            f"üì¶ **–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order.id}**\n"
            f"üå∏ –°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:\n"
            + "\n".join(
                [f"- {item.product.name}: {item.quantity} —à—Ç. –ø–æ {item.price:.2f} —Ä—É–±." for item in order_items]
            )
            + f"\nüí∞ –û–±—â–∞—è —Å—É–º–º–∞: {order.total_price:.2f} —Ä—É–±.\n"
            f"üìç –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {order.address or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞: {phone_number}"
        )

        keyboard = [[InlineKeyboardButton("–í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É", callback_data=f"take_order_{order.id}")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        token = os.getenv('TELEGRAM_BOT_TOKEN')
        if not token:
            raise ValueError("–¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env.")

        app = Application.builder().token(token).build()
        await app.initialize()

        for staff in staff_users:
            await app.bot.send_message(
                chat_id=staff.telegram_id,
                text=order_message,
                parse_mode="Markdown",
                reply_markup=reply_markup
            )

        await app.shutdown()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}", exc_info=True)


def send_new_order_notification(order):
    """
    –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–∞–∫–∞–∑–∞—Ö.
    """
    asyncio.run(async_send_new_order_notification(order))




# ======= –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ =======
async def complete_order_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –ø–æ inline-–∫–Ω–æ–ø–∫–µ.
    """
    query = update.callback_query
    await query.answer()
    callback_data = query.data

    if callback_data.startswith("complete_order_"):
        order_id = callback_data.replace("complete_order_", "")
        try:
            order = await sync_to_async(Order.objects.get)(id=order_id, status="processing")
            order.status = "delivered"
            await sync_to_async(order.save)()
            await query.edit_message_text(f"‚úÖ –ó–∞–∫–∞–∑ #{order.id} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω.")
        except Order.DoesNotExist:
            logger.error(f"–ó–∞–∫–∞–∑ —Å ID {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à—ë–Ω.")
            await query.edit_message_text("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à—ë–Ω.")


# ======= –í–∑—è—Ç–∏–µ –∑–∞–∫–∞–∑–∞ –≤ —Ä–∞–±–æ—Ç—É =======
async def take_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É".
    """
    query = update.callback_query
    await query.answer()
    callback_data = query.data

    if callback_data.startswith("take_order_"):
        order_id = int(callback_data.split("_")[2])
        try:
            order = await sync_to_async(Order.objects.get)(id=order_id, status="created")
            order.status = "processing"
            await sync_to_async(order.save)()
            await query.edit_message_text(f"‚úÖ –ó–∞–∫–∞–∑ #{order.id} –≤–∑—è—Ç –≤ —Ä–∞–±–æ—Ç—É.")
        except Order.DoesNotExist:
            await query.edit_message_text("‚ùå –≠—Ç–æ—Ç –∑–∞–∫–∞–∑ –±–æ–ª—å—à–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")

# ======= –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ =======
async def update_order_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ –ø–æ inline-–∫–Ω–æ–ø–∫–µ.
    """
    query = update.callback_query
    await query.answer()
    try:
        _, order_id, new_status = query.data.split("_")
        if new_status not in ["processing", "delivered", "canceled"]:
            raise ValueError("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞.")
        order = await sync_to_async(Order.objects.get)(id=order_id)
        order.status = new_status
        await sync_to_async(order.save)()
        await query.edit_message_text(f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ #{order.id} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ '{new_status}'.")
    except ValueError as e:
        await query.edit_message_text(f"–û—à–∏–±–∫–∞: {e}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞: {e}", exc_info=True)
        await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞.")

