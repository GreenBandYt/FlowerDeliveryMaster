from django.shortcuts import render, get_object_or_404, redirect
from users.models import CustomUser
from catalog.models import Order, OrderItem, Review
from django.db.models import Sum, Avg
from django.contrib import messages
from django.utils import timezone
from datetime import timedelta

# Функция для отображения главной страницы админ-зоны
def admin_home(request):
    users = CustomUser.objects.all()
    return render(request, 'admin_zone/admin_dashboard.html', {'users': users})


# Функция для управления заказами
def manage_orders(request):
    orders = Order.objects.all()
    return render(request, 'admin_zone/manage_orders.html', {'orders': orders})


# Функция для обновления статуса заказа
def update_order_status(request, order_id):
    if request.method == 'POST':
        order = get_object_or_404(Order, id=order_id)
        new_status = request.POST.get('status')
        if new_status:
            order.status = new_status
            order.save()
            messages.success(request, f"Статус заказа #{order.id} успешно обновлен на '{new_status}'.")
        else:
            messages.error(request, "Ошибка: статус заказа не указан.")
    return redirect('admin_zone:orders')


# Функция для управления отзывами
def manage_reviews(request):
    reviews = Review.objects.all()
    return render(request, 'admin_zone/manage_reviews.html', {'reviews': reviews})


# Функция для удаления отзыва
def delete_review(request, review_id):
    review = get_object_or_404(Review, id=review_id)
    review.delete()
    messages.success(request, f"Отзыв #{review_id} успешно удален.")
    return redirect('admin_zone:reviews')


# Функция для просмотра аналитики
def view_analytics(request):
    # Получаем текущую aware дату и границы периодов
    now = timezone.now()
    today_start = now.replace(hour=0, minute=0, second=0, microsecond=0)
    week_start = today_start - timedelta(days=today_start.weekday())
    month_start = today_start.replace(day=1)
    year_start = today_start.replace(month=1, day=1)

    # === Общие данные за весь период ===
    total_orders = Order.objects.count()
    total_revenue = OrderItem.objects.aggregate(total_revenue=Sum('price'))['total_revenue'] or 0
    total_users = CustomUser.objects.count()
    average_order_value = Order.objects.aggregate(avg_order=Avg('total_price'))['avg_order'] or 0

    # === Функция для подсчета данных по периодам ===
    def get_period_data(start_date):
        orders = Order.objects.filter(created_at__gte=start_date)
        users = CustomUser.objects.filter(date_joined__gte=start_date).count()
        revenue = OrderItem.objects.filter(order__created_at__gte=start_date).aggregate(Sum('price'))['price__sum'] or 0
        average_check = orders.aggregate(avg_check=Avg('total_price'))['avg_check'] or 0

        return {
            "users": users,
            "orders": orders.count(),
            "revenue": revenue,
            "average_check": average_check,
        }

    # === Аналитика по периодам ===
    period_data = [
        {"period": "Сегодня", **get_period_data(today_start)},
        {"period": "Последние 7 дней", **get_period_data(today_start - timedelta(days=7))},
        {"period": "Текущий месяц", **get_period_data(month_start)},
        {"period": "Текущий год", **get_period_data(year_start)},
    ]

    # === Передача данных в шаблон ===
    return render(request, 'admin_zone/view_analytics.html', {
        'total_orders': total_orders,
        'total_revenue': round(total_revenue, 2),
        'total_users': total_users,
        'average_order_value': round(average_order_value, 2),
        'analytics_data': period_data,
    })
